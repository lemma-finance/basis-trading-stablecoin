{
  "manifestVersion": "3.2",
  "admin": {
    "address": "0xC1e0A9DB9eA830c52603798481045688c8AE99C2",
    "txHash": "0xd348ff0b3614fdbea5351a625a16fc0de55a84608c56696177a84c7e0b949189"
  },
  "proxies": [
    {
      "address": "0x618fB9dbd2BD6eb968B4c1af36af6CB0b45310Ec",
      "txHash": "0xc5600b421935e665936118ad4c3ccec668823607ae00822189daa3f9763403d6",
      "kind": "transparent"
    },
    {
      "address": "0x967AB65ef14c58bD4DcfFeaAA1ADb40a022140E5",
      "txHash": "0x32163e8ff4926728cd4fecc3ac809403e0379b51861c365a424fea9abbd404cb",
      "kind": "transparent"
    },
    {
      "address": "0x3C1Cb427D20F15563aDa8C249E71db76d7183B6c",
      "txHash": "0x7dbc271aab38a11d2ec83635a5bf005d70718d98b71118aaba0cdd37fce14743",
      "kind": "transparent"
    },
    {
      "address": "0x547382C0D1b23f707918D3c83A77317B71Aa8470",
      "txHash": "0x71e1a45982b56fdf01575342d6592016e06c401c9fca736b7d9f85484e08ef88",
      "kind": "transparent"
    },
    {
      "address": "0x3f9A1B67F3a3548e0ea5c9eaf43A402d12b6a273",
      "txHash": "0x16cd3a17539e5f9ee0e9c45fba3c58840fdd705f726abd340c0dcbcb65ccaecd",
      "kind": "transparent"
    },
    {
      "address": "0x3D63c50AD04DD5aE394CAB562b7691DD5de7CF6f",
      "txHash": "0xd3a9efaaa8fa44029043efad6ad9d5f4be59cf015742a5fdaf1a39326c6dbbeb",
      "kind": "transparent"
    },
    {
      "address": "0xccA9728291bC98ff4F97EF57Be3466227b0eb06C",
      "txHash": "0x2c3f34b7fbfbe60c8626f37072bf876f53cc7e25485615d72533dec8f4685d58",
      "kind": "transparent"
    },
    {
      "address": "0x193521C8934bCF3473453AF4321911E7A89E0E12",
      "txHash": "0x03e31fdfa6cdae2370a59f4133fb31aeb198711025ab6897fbb338cf5aeb38f1",
      "kind": "transparent"
    },
    {
      "address": "0x01E21d7B8c39dc4C764c19b308Bd8b14B1ba139E",
      "txHash": "0x51072f2ed4941216d1d72077c775b66019d695e20e21aa448c91c1bb134fd6c1",
      "kind": "transparent"
    },
    {
      "address": "0x7C8BaafA542c57fF9B2B90612bf8aB9E86e22C09",
      "txHash": "0xf5deaf037803e5db2ec90db3785f937b2132d87a0f7352ca560eff62b622875d",
      "kind": "transparent"
    },
    {
      "address": "0xDde063eBe8E85D666AD99f731B4Dbf8C98F29708",
      "txHash": "0x29b3c7000ab0deb2125c1740c29dbac3d22a38021515add06c098370ef902caa",
      "kind": "transparent"
    },
    {
      "address": "0xc6B407503dE64956Ad3cF5Ab112cA4f56AA13517",
      "txHash": "0x018e8a20e5b3e55d3cfd170d68f4c0fbe9d07d3b3abeca0d933291fd851b189e",
      "kind": "transparent"
    },
    {
      "address": "0x3a622DB2db50f463dF562Dc5F341545A64C580fc",
      "txHash": "0xb9cdfa3625194217f12901a4fc2ae3b749115aada0e1083086be01b514758016",
      "kind": "transparent"
    },
    {
      "address": "0x7A28cf37763279F774916b85b5ef8b64AB421f79",
      "txHash": "0x753208d74cf54fd6a0724093a5163b2cbd34a1fa2274642a71c25a45fcef104e",
      "kind": "transparent"
    },
    {
      "address": "0xa31F4c0eF2935Af25370D9AE275169CCd9793DA3",
      "txHash": "0xead2e5897bc9a6fcc0aca1679c62a9849cb539a9ed666358380714fd0c6bd034",
      "kind": "transparent"
    },
    {
      "address": "0xF9c0bF1CFAAB883ADb95fed4cfD60133BffaB18a",
      "txHash": "0x52b86dbc883443c2d2e3d6c35ff0357a99b7b991c43297fcf24f9d1f931b5153",
      "kind": "transparent"
    },
    {
      "address": "0x6f2E42BB4176e9A7352a8bF8886255Be9F3D2d13",
      "txHash": "0x3d8f888e395ec770cbf5a6f319adf4d17651deac275cb29bc48517ec6ca4ef34",
      "kind": "transparent"
    },
    {
      "address": "0xA75E74a5109Ed8221070142D15cEBfFe9642F489",
      "txHash": "0x932d29a115ca1dcadd6aabeb96360c62c957cb8e208ef0fbf4f32d828d741818",
      "kind": "transparent"
    },
    {
      "address": "0x26291175Fa0Ea3C8583fEdEB56805eA68289b105",
      "txHash": "0xd93095d2c2b0947a4a76f9bd6c99bc517b9452a5fe67adcc241bee28e0a5070b",
      "kind": "transparent"
    },
    {
      "address": "0x1bEfE2d8417e22Da2E0432560ef9B2aB68Ab75Ad",
      "txHash": "0xb0ced568fec49c3d3701805690697bb15e92c857d0d52610d49f88249ff122c2",
      "kind": "transparent"
    },
    {
      "address": "0x31403b1e52051883f2Ce1B1b4C89f36034e1221D",
      "txHash": "0x646903be4d900e6c329ec7f6acd765265f218369f7b4d15f76e16f657046ba73",
      "kind": "transparent"
    },
    {
      "address": "0x6fFa22292b86D678fF6621eEdC9B15e68dC44DcD",
      "txHash": "0x299337b24909c16f13c71371fbb0645fe3b45c04693201cdc2ca0043c974b276",
      "kind": "transparent"
    },
    {
      "address": "0x4f1F87d512650f32bf9949C4c5Ef37a3cc891C6D",
      "txHash": "0x2289cc170b60491b10374c9c1cfd23602606d527cd57ca97af867c260a04f4dd",
      "kind": "transparent"
    },
    {
      "address": "0x87006e75a5B6bE9D1bbF61AC8Cd84f05D9140589",
      "txHash": "0x4f8c2460cae0f5a9cae6014bc83f02650ff0db6d280d0402ce69360afa9e30d0",
      "kind": "transparent"
    },
    {
      "address": "0x8fC8CFB7f7362E44E472c690A6e025B80E406458",
      "txHash": "0x855d20072036706d248693dc0166b58115fd58c3b89f991743b475d261b37ad3",
      "kind": "transparent"
    },
    {
      "address": "0xc9952Fc93Fa9bE383ccB39008c786b9f94eAc95d",
      "txHash": "0xaa600784a6f5eab59bba44bac1136796e77be6724bb47b346cd41b97eaa2ceef",
      "kind": "transparent"
    },
    {
      "address": "0x79E8AB29Ff79805025c9462a2f2F12e9A496f81d",
      "txHash": "0x7a1bb1e697c648f40bb5a817160bac272f9c27e31dfa44df665ebe0ebf1ed7b9",
      "kind": "transparent"
    },
    {
      "address": "0x95775fD3Afb1F4072794CA4ddA27F2444BCf8Ac3",
      "txHash": "0xef07383d58035e81aebe777935af5b23aae08debdc4dad2750ee9bc3a5ae07cc",
      "kind": "transparent"
    },
    {
      "address": "0x74Df809b1dfC099E8cdBc98f6a8D1F5c2C3f66f8",
      "txHash": "0xc493cfbefdd08793caca7655966df68f16b4c4782396c7644273d59ef270970d",
      "kind": "transparent"
    },
    {
      "address": "0x103A3b128991781EE2c8db0454cA99d67b257923",
      "txHash": "0xecbfca2e655fd7ed98dd995c1412ee1a845564906daa209110d4f8901f8e47cd",
      "kind": "transparent"
    },
    {
      "address": "0xB9d9e972100a1dD01cd441774b45b5821e136043",
      "txHash": "0xb5f46257903bcfd8800ab252baeb3671e345433c893a99da3defb1483ad4c8f3",
      "kind": "transparent"
    },
    {
      "address": "0x683d9CDD3239E0e01E8dC6315fA50AD92aB71D2d",
      "txHash": "0x5b1fbb60ace0bd3e8ff1dd70a0f1385ee73a6e8ef934fe4ae8108b68edca50ce",
      "kind": "transparent"
    },
    {
      "address": "0x0Dd99d9f56A14E9D53b2DdC62D9f0bAbe806647A",
      "txHash": "0x92e251b4da7ea9c6210b293f3678320526c1f5b22764a1ff908eeb183c61198c",
      "kind": "transparent"
    },
    {
      "address": "0xd9fEc8238711935D6c8d79Bef2B9546ef23FC046",
      "txHash": "0x6f006683e5c85193081be641023a2e1cf31d12d0cab6d2ab8d44a6579fd8036c",
      "kind": "transparent"
    },
    {
      "address": "0x158d291D8b47F056751cfF47d1eEcd19FDF9B6f8",
      "txHash": "0x5db4b226784a6b888310850de2f7f50ad7efc005634fabe2924eb8d89874bc6b",
      "kind": "transparent"
    },
    {
      "address": "0x2F54D1563963fC04770E85AF819c89Dc807f6a06",
      "txHash": "0xa4795577d34575ff87990e0b924da931aec2b9b2ddf3efd21edfa951778ad1f8",
      "kind": "transparent"
    },
    {
      "address": "0x9849832a1d8274aaeDb1112ad9686413461e7101",
      "txHash": "0x387aa64d7cea4e1ee022af1482fefe94b99898a9b79e63d4375c227944344c49",
      "kind": "transparent"
    }
  ],
  "impls": {
    "0e8431916fa9ea7e2dba979c5b6ec0b52f40910f62ac12da0a9fe22f7241f97c": {
      "address": "0xa722bdA6968F50778B973Ae2701e90200C564B49",
      "txHash": "0x552b7bf0d654193df7be5fee2be58a39f3c16909d71d24c9c0dc91c185859894",
      "layout": {
        "storage": [
          {
            "label": "_initialized",
            "offset": 0,
            "slot": "0",
            "type": "t_bool",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:39"
          },
          {
            "label": "_initializing",
            "offset": 1,
            "slot": "0",
            "type": "t_bool",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:44"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ContextUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "label": "_owner",
            "offset": 0,
            "slot": "51",
            "type": "t_address",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "52",
            "type": "t_array(t_uint256)49_storage",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "label": "_trustedForwarder",
            "offset": 0,
            "slot": "101",
            "type": "t_address",
            "contract": "ERC2771ContextUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/metatx/ERC2771ContextUpgradeable.sol:13"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "102",
            "type": "t_array(t_uint256)49_storage",
            "contract": "ERC2771ContextUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/metatx/ERC2771ContextUpgradeable.sol:46"
          },
          {
            "label": "usdLemma",
            "offset": 0,
            "slot": "151",
            "type": "t_address",
            "contract": "PerpLemma",
            "src": "contracts/wrappers/PerpLemma.sol:57"
          },
          {
            "label": "reBalancer",
            "offset": 0,
            "slot": "152",
            "type": "t_address",
            "contract": "PerpLemma",
            "src": "contracts/wrappers/PerpLemma.sol:58"
          },
          {
            "label": "baseTokenAddress",
            "offset": 0,
            "slot": "153",
            "type": "t_address",
            "contract": "PerpLemma",
            "src": "contracts/wrappers/PerpLemma.sol:59"
          },
          {
            "label": "referrerCode",
            "offset": 0,
            "slot": "154",
            "type": "t_bytes32",
            "contract": "PerpLemma",
            "src": "contracts/wrappers/PerpLemma.sol:60"
          },
          {
            "label": "clearingHouse",
            "offset": 0,
            "slot": "155",
            "type": "t_contract(IClearingHouse)5180",
            "contract": "PerpLemma",
            "src": "contracts/wrappers/PerpLemma.sol:62"
          },
          {
            "label": "clearingHouseConfig",
            "offset": 0,
            "slot": "156",
            "type": "t_contract(IClearingHouseConfig)5231",
            "contract": "PerpLemma",
            "src": "contracts/wrappers/PerpLemma.sol:63"
          },
          {
            "label": "iPerpVault",
            "offset": 0,
            "slot": "157",
            "type": "t_contract(IPerpVault)7883",
            "contract": "PerpLemma",
            "src": "contracts/wrappers/PerpLemma.sol:64"
          },
          {
            "label": "accountBalance",
            "offset": 0,
            "slot": "158",
            "type": "t_contract(IAccountBalance)4953",
            "contract": "PerpLemma",
            "src": "contracts/wrappers/PerpLemma.sol:65"
          },
          {
            "label": "marketRegistry",
            "offset": 0,
            "slot": "159",
            "type": "t_contract(IMarketRegistry)5381",
            "contract": "PerpLemma",
            "src": "contracts/wrappers/PerpLemma.sol:66"
          },
          {
            "label": "exchange",
            "offset": 0,
            "slot": "160",
            "type": "t_contract(IExchange)5252",
            "contract": "PerpLemma",
            "src": "contracts/wrappers/PerpLemma.sol:67"
          },
          {
            "label": "collateral",
            "offset": 0,
            "slot": "161",
            "type": "t_contract(IERC20Decimals)7826",
            "contract": "PerpLemma",
            "src": "contracts/wrappers/PerpLemma.sol:68"
          },
          {
            "label": "usdc",
            "offset": 0,
            "slot": "162",
            "type": "t_contract(IERC20Decimals)7826",
            "contract": "PerpLemma",
            "src": "contracts/wrappers/PerpLemma.sol:69"
          },
          {
            "label": "collateralDecimals",
            "offset": 0,
            "slot": "163",
            "type": "t_uint256",
            "contract": "PerpLemma",
            "src": "contracts/wrappers/PerpLemma.sol:71"
          },
          {
            "label": "positionAtSettlementInQuote",
            "offset": 0,
            "slot": "164",
            "type": "t_uint256",
            "contract": "PerpLemma",
            "src": "contracts/wrappers/PerpLemma.sol:75"
          },
          {
            "label": "positionAtSettlementInBase",
            "offset": 0,
            "slot": "165",
            "type": "t_uint256",
            "contract": "PerpLemma",
            "src": "contracts/wrappers/PerpLemma.sol:76"
          },
          {
            "label": "maxPosition",
            "offset": 0,
            "slot": "166",
            "type": "t_uint256",
            "contract": "PerpLemma",
            "src": "contracts/wrappers/PerpLemma.sol:78"
          },
          {
            "label": "totalFundingPNL",
            "offset": 0,
            "slot": "167",
            "type": "t_int256",
            "contract": "PerpLemma",
            "src": "contracts/wrappers/PerpLemma.sol:79"
          },
          {
            "label": "realizedFundingPNL",
            "offset": 0,
            "slot": "168",
            "type": "t_int256",
            "contract": "PerpLemma",
            "src": "contracts/wrappers/PerpLemma.sol:80"
          },
          {
            "label": "hasSettled",
            "offset": 0,
            "slot": "169",
            "type": "t_bool",
            "contract": "PerpLemma",
            "src": "contracts/wrappers/PerpLemma.sol:83"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]",
            "numberOfBytes": "1568"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]",
            "numberOfBytes": "1600"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_bytes32": {
            "label": "bytes32",
            "numberOfBytes": "32"
          },
          "t_contract(IAccountBalance)4953": {
            "label": "contract IAccountBalance",
            "numberOfBytes": "20"
          },
          "t_contract(IClearingHouse)5180": {
            "label": "contract IClearingHouse",
            "numberOfBytes": "20"
          },
          "t_contract(IClearingHouseConfig)5231": {
            "label": "contract IClearingHouseConfig",
            "numberOfBytes": "20"
          },
          "t_contract(IERC20Decimals)7826": {
            "label": "contract IERC20Decimals",
            "numberOfBytes": "20"
          },
          "t_contract(IExchange)5252": {
            "label": "contract IExchange",
            "numberOfBytes": "20"
          },
          "t_contract(IMarketRegistry)5381": {
            "label": "contract IMarketRegistry",
            "numberOfBytes": "20"
          },
          "t_contract(IPerpVault)7883": {
            "label": "contract IPerpVault",
            "numberOfBytes": "20"
          },
          "t_int256": {
            "label": "int256",
            "numberOfBytes": "32"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          }
        }
      }
    },
    "99b785d9d48c41538b04fa30b557236848247633d05d3e84d05b7ac6639c073c": {
      "address": "0x01E21d7B8c39dc4C764c19b308Bd8b14B1ba139E",
      "txHash": "0xe844ec3fd99c8ae0837387f507ebd1d18cb63c356ab7aed3b94de08f3d501b0d",
      "layout": {
        "storage": [
          {
            "label": "_initialized",
            "offset": 0,
            "slot": "0",
            "type": "t_bool",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:39"
          },
          {
            "label": "_initializing",
            "offset": 1,
            "slot": "0",
            "type": "t_bool",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:44"
          },
          {
            "label": "_status",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "2",
            "type": "t_array(t_uint256)49_storage",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:68"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "51",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ContextUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "label": "_balances",
            "offset": 0,
            "slot": "101",
            "type": "t_mapping(t_address,t_uint256)",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
          },
          {
            "label": "_allowances",
            "offset": 0,
            "slot": "102",
            "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
          },
          {
            "label": "_totalSupply",
            "offset": 0,
            "slot": "103",
            "type": "t_uint256",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
          },
          {
            "label": "_name",
            "offset": 0,
            "slot": "104",
            "type": "t_string_storage",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
          },
          {
            "label": "_symbol",
            "offset": 0,
            "slot": "105",
            "type": "t_string_storage",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "106",
            "type": "t_array(t_uint256)45_storage",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:362"
          },
          {
            "label": "_HASHED_NAME",
            "offset": 0,
            "slot": "151",
            "type": "t_bytes32",
            "contract": "EIP712Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol:31"
          },
          {
            "label": "_HASHED_VERSION",
            "offset": 0,
            "slot": "152",
            "type": "t_bytes32",
            "contract": "EIP712Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol:32"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "153",
            "type": "t_array(t_uint256)50_storage",
            "contract": "EIP712Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol:114"
          },
          {
            "label": "_nonces",
            "offset": 0,
            "slot": "203",
            "type": "t_mapping(t_address,t_struct(Counter)1786_storage)",
            "contract": "ERC20PermitUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:26"
          },
          {
            "label": "_PERMIT_TYPEHASH",
            "offset": 0,
            "slot": "204",
            "type": "t_bytes32",
            "contract": "ERC20PermitUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:29"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "205",
            "type": "t_array(t_uint256)49_storage",
            "contract": "ERC20PermitUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:94"
          },
          {
            "label": "_owner",
            "offset": 0,
            "slot": "254",
            "type": "t_address",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "255",
            "type": "t_array(t_uint256)49_storage",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "label": "_trustedForwarder",
            "offset": 0,
            "slot": "304",
            "type": "t_address",
            "contract": "ERC2771ContextUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/metatx/ERC2771ContextUpgradeable.sol:13"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "305",
            "type": "t_array(t_uint256)49_storage",
            "contract": "ERC2771ContextUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/metatx/ERC2771ContextUpgradeable.sol:46"
          },
          {
            "label": "lemmaTreasury",
            "offset": 0,
            "slot": "354",
            "type": "t_address",
            "contract": "USDLemma",
            "src": "contracts/USDLemma.sol:20"
          },
          {
            "label": "stakingContractAddress",
            "offset": 0,
            "slot": "355",
            "type": "t_address",
            "contract": "USDLemma",
            "src": "contracts/USDLemma.sol:21"
          },
          {
            "label": "fees",
            "offset": 0,
            "slot": "356",
            "type": "t_uint256",
            "contract": "USDLemma",
            "src": "contracts/USDLemma.sol:22"
          },
          {
            "label": "perpetualDEXWrappers",
            "offset": 0,
            "slot": "357",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_address))",
            "contract": "USDLemma",
            "src": "contracts/USDLemma.sol:24"
          },
          {
            "label": "whiteListAddress",
            "offset": 0,
            "slot": "358",
            "type": "t_mapping(t_address,t_bool)",
            "contract": "USDLemma",
            "src": "contracts/USDLemma.sol:26"
          },
          {
            "label": "mutexBlock",
            "offset": 0,
            "slot": "359",
            "type": "t_uint256",
            "contract": "USDLemma",
            "src": "contracts/USDLemma.sol:27"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_array(t_uint256)45_storage": {
            "label": "uint256[45]",
            "numberOfBytes": "1440"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]",
            "numberOfBytes": "1568"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]",
            "numberOfBytes": "1600"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_bytes32": {
            "label": "bytes32",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_address)": {
            "label": "mapping(address => address)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_struct(Counter)1786_storage)": {
            "label": "mapping(address => struct CountersUpgradeable.Counter)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_address))": {
            "label": "mapping(uint256 => mapping(address => address))",
            "numberOfBytes": "32"
          },
          "t_string_storage": {
            "label": "string",
            "numberOfBytes": "32"
          },
          "t_struct(Counter)1786_storage": {
            "label": "struct CountersUpgradeable.Counter",
            "members": [
              {
                "label": "_value",
                "type": "t_uint256",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          }
        }
      }
    },
    "ee9da1cefaa3c76b38d8896033d4354ff1ddaf0f2245beda8b4dabc6e0103128": {
      "address": "0x6A59CC73e334b018C9922793d96Df84B538E6fD5",
      "txHash": "0x79447fa5f84011d244176d8316e87a6cc9c128ffe8947d045391f8aac8c842ce",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:26"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:30"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:77"
          },
          {
            "contract": "ERC2771ContextUpgradeable",
            "label": "_trustedForwarder",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/metatx/ERC2771ContextUpgradeable.sol:12"
          },
          {
            "contract": "ERC2771ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/metatx/ERC2771ContextUpgradeable.sol:45"
          },
          {
            "contract": "PerpLemma",
            "label": "usdLemma",
            "type": "t_address",
            "src": "contracts/wrappers/PerpLemma.sol:27"
          },
          {
            "contract": "PerpLemma",
            "label": "reBalancer",
            "type": "t_address",
            "src": "contracts/wrappers/PerpLemma.sol:28"
          },
          {
            "contract": "PerpLemma",
            "label": "baseTokenAddress",
            "type": "t_address",
            "src": "contracts/wrappers/PerpLemma.sol:29"
          },
          {
            "contract": "PerpLemma",
            "label": "referrerCode",
            "type": "t_bytes32",
            "src": "contracts/wrappers/PerpLemma.sol:30"
          },
          {
            "contract": "PerpLemma",
            "label": "clearingHouse",
            "type": "t_contract(IClearingHouse)2006",
            "src": "contracts/wrappers/PerpLemma.sol:32"
          },
          {
            "contract": "PerpLemma",
            "label": "clearingHouseConfig",
            "type": "t_contract(IClearingHouseConfig)2057",
            "src": "contracts/wrappers/PerpLemma.sol:33"
          },
          {
            "contract": "PerpLemma",
            "label": "perpVault",
            "type": "t_contract(IPerpVault)2266",
            "src": "contracts/wrappers/PerpLemma.sol:34"
          },
          {
            "contract": "PerpLemma",
            "label": "accountBalance",
            "type": "t_contract(IAccountBalance)1779",
            "src": "contracts/wrappers/PerpLemma.sol:35"
          },
          {
            "contract": "PerpLemma",
            "label": "marketRegistry",
            "type": "t_contract(IMarketRegistry)2207",
            "src": "contracts/wrappers/PerpLemma.sol:36"
          },
          {
            "contract": "PerpLemma",
            "label": "exchange",
            "type": "t_contract(IExchange)2078",
            "src": "contracts/wrappers/PerpLemma.sol:37"
          },
          {
            "contract": "PerpLemma",
            "label": "collateral",
            "type": "t_contract(IERC20Decimals)1640",
            "src": "contracts/wrappers/PerpLemma.sol:38"
          },
          {
            "contract": "PerpLemma",
            "label": "usdc",
            "type": "t_contract(IERC20Decimals)1640",
            "src": "contracts/wrappers/PerpLemma.sol:39"
          },
          {
            "contract": "PerpLemma",
            "label": "maxPosition",
            "type": "t_uint256",
            "src": "contracts/wrappers/PerpLemma.sol:42"
          },
          {
            "contract": "PerpLemma",
            "label": "collateralDecimals",
            "type": "t_uint256",
            "src": "contracts/wrappers/PerpLemma.sol:43"
          },
          {
            "contract": "PerpLemma",
            "label": "positionAtSettlementInQuote",
            "type": "t_uint256",
            "src": "contracts/wrappers/PerpLemma.sol:47"
          },
          {
            "contract": "PerpLemma",
            "label": "positionAtSettlementInBase",
            "type": "t_uint256",
            "src": "contracts/wrappers/PerpLemma.sol:48"
          },
          {
            "contract": "PerpLemma",
            "label": "totalFundingPNL",
            "type": "t_int256",
            "src": "contracts/wrappers/PerpLemma.sol:50"
          },
          {
            "contract": "PerpLemma",
            "label": "realizedFundingPNL",
            "type": "t_int256",
            "src": "contracts/wrappers/PerpLemma.sol:51"
          },
          {
            "contract": "PerpLemma",
            "label": "hasSettled",
            "type": "t_bool",
            "src": "contracts/wrappers/PerpLemma.sol:54"
          }
        ],
        "types": {
          "t_address": {
            "label": "address"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_contract(IClearingHouse)2006": {
            "label": "contract IClearingHouse"
          },
          "t_contract(IClearingHouseConfig)2057": {
            "label": "contract IClearingHouseConfig"
          },
          "t_contract(IPerpVault)2266": {
            "label": "contract IPerpVault"
          },
          "t_contract(IAccountBalance)1779": {
            "label": "contract IAccountBalance"
          },
          "t_contract(IMarketRegistry)2207": {
            "label": "contract IMarketRegistry"
          },
          "t_contract(IExchange)2078": {
            "label": "contract IExchange"
          },
          "t_contract(IERC20Decimals)1640": {
            "label": "contract IERC20Decimals"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_int256": {
            "label": "int256"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          }
        }
      }
    },
    "8a550be6e7e633d88e88725c24cc70e9a1403f94ecd86ee7593ebb040e1db98f": {
      "address": "0x79E8AB29Ff79805025c9462a2f2F12e9A496f81d",
      "txHash": "0x1412a398e794edfb7bb747a877ec43717cc30b06980a23dc9ec6f4a093408b35",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:26"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:37"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:67"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:30"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:35"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_allowances",
            "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_totalSupply",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_name",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:42"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)45_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:360"
          },
          {
            "contract": "EIP712Upgradeable",
            "label": "_HASHED_NAME",
            "type": "t_bytes32",
            "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol:29"
          },
          {
            "contract": "EIP712Upgradeable",
            "label": "_HASHED_VERSION",
            "type": "t_bytes32",
            "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol:30"
          },
          {
            "contract": "EIP712Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol:111"
          },
          {
            "contract": "ERC20PermitUpgradeable",
            "label": "_nonces",
            "type": "t_mapping(t_address,t_struct(Counter)1754_storage)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:25"
          },
          {
            "contract": "ERC20PermitUpgradeable",
            "label": "_PERMIT_TYPEHASH",
            "type": "t_bytes32",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:28"
          },
          {
            "contract": "ERC20PermitUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:93"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:77"
          },
          {
            "contract": "ERC2771ContextUpgradeable",
            "label": "_trustedForwarder",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/metatx/ERC2771ContextUpgradeable.sol:12"
          },
          {
            "contract": "ERC2771ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/metatx/ERC2771ContextUpgradeable.sol:45"
          },
          {
            "contract": "USDLemma",
            "label": "lemmaTreasury",
            "type": "t_address",
            "src": "contracts/USDLemma.sol:20"
          },
          {
            "contract": "USDLemma",
            "label": "stakingContractAddress",
            "type": "t_address",
            "src": "contracts/USDLemma.sol:21"
          },
          {
            "contract": "USDLemma",
            "label": "fees",
            "type": "t_uint256",
            "src": "contracts/USDLemma.sol:22"
          },
          {
            "contract": "USDLemma",
            "label": "perpetualDEXWrappers",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_address))",
            "src": "contracts/USDLemma.sol:24"
          },
          {
            "contract": "USDLemma",
            "label": "whiteListAddress",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/USDLemma.sol:25"
          }
        ],
        "types": {
          "t_address": {
            "label": "address"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_address))": {
            "label": "mapping(uint256 => mapping(address => address))"
          },
          "t_mapping(t_address,t_address)": {
            "label": "mapping(address => address)"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_address,t_struct(Counter)1754_storage)": {
            "label": "mapping(address => struct CountersUpgradeable.Counter)"
          },
          "t_struct(Counter)1754_storage": {
            "label": "struct CountersUpgradeable.Counter",
            "members": [
              {
                "label": "_value",
                "type": "t_uint256"
              }
            ]
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_array(t_uint256)45_storage": {
            "label": "uint256[45]"
          }
        }
      }
    },
    "3db1ff5af1c670f86d8504622143d1a11fc7696c991c9562513d6f27e311fc25": {
      "address": "0x95775fD3Afb1F4072794CA4ddA27F2444BCf8Ac3",
      "txHash": "0xc7dda6585c03a462bd5da17f812c339a798b3bd885c0e2bc18b769a061feca2e",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:26"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:30"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:35"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_allowances",
            "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_totalSupply",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_name",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:42"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)45_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:360"
          },
          {
            "contract": "EIP712Upgradeable",
            "label": "_HASHED_NAME",
            "type": "t_bytes32",
            "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol:29"
          },
          {
            "contract": "EIP712Upgradeable",
            "label": "_HASHED_VERSION",
            "type": "t_bytes32",
            "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol:30"
          },
          {
            "contract": "EIP712Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol:111"
          },
          {
            "contract": "ERC20PermitUpgradeable",
            "label": "_nonces",
            "type": "t_mapping(t_address,t_struct(Counter)1696_storage)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:25"
          },
          {
            "contract": "ERC20PermitUpgradeable",
            "label": "_PERMIT_TYPEHASH",
            "type": "t_bytes32",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:28"
          },
          {
            "contract": "ERC20PermitUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:93"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:77"
          },
          {
            "contract": "ERC2771ContextUpgradeable",
            "label": "_trustedForwarder",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/metatx/ERC2771ContextUpgradeable.sol:12"
          },
          {
            "contract": "ERC2771ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/metatx/ERC2771ContextUpgradeable.sol:45"
          },
          {
            "contract": "xUSDL",
            "label": "minimumLock",
            "type": "t_uint256",
            "src": "contracts/xUSDL.sol:12"
          },
          {
            "contract": "xUSDL",
            "label": "userUnlockBlock",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "contracts/xUSDL.sol:14"
          },
          {
            "contract": "xUSDL",
            "label": "usdl",
            "type": "t_contract(IERC20Upgradeable)921",
            "src": "contracts/xUSDL.sol:16"
          },
          {
            "contract": "xUSDL",
            "label": "periphery",
            "type": "t_address",
            "src": "contracts/xUSDL.sol:22"
          }
        ],
        "types": {
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(IERC20Upgradeable)921": {
            "label": "contract IERC20Upgradeable"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_address,t_struct(Counter)1696_storage)": {
            "label": "mapping(address => struct CountersUpgradeable.Counter)"
          },
          "t_struct(Counter)1696_storage": {
            "label": "struct CountersUpgradeable.Counter",
            "members": [
              {
                "label": "_value",
                "type": "t_uint256"
              }
            ]
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_array(t_uint256)45_storage": {
            "label": "uint256[45]"
          },
          "t_bool": {
            "label": "bool"
          }
        }
      }
    },
    "4953155145aa35517d3bbd2b5b83b2ce37bb9640071194f1e99d650b2b591341": {
      "address": "0x2A590C461Db46bca129E8dBe5C3998A8fF402e76",
      "txHash": "0x97e7ce0fe4d7a42ecfe442d9238e1cde84b5533c6b8d8722407d3e891ab5d4bd",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:26"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:30"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:77"
          },
          {
            "contract": "ERC2771ContextUpgradeable",
            "label": "_trustedForwarder",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/metatx/ERC2771ContextUpgradeable.sol:12"
          },
          {
            "contract": "ERC2771ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/metatx/ERC2771ContextUpgradeable.sol:45"
          },
          {
            "contract": "MCDEXLemma",
            "label": "liquidityPool",
            "type": "t_contract(ILiquidityPool)4343",
            "src": "contracts/wrappers/MCDEXLemma.sol:28"
          },
          {
            "contract": "MCDEXLemma",
            "label": "perpetualIndex",
            "type": "t_uint256",
            "src": "contracts/wrappers/MCDEXLemma.sol:31"
          },
          {
            "contract": "MCDEXLemma",
            "label": "collateral",
            "type": "t_contract(IERC20Upgradeable)979",
            "src": "contracts/wrappers/MCDEXLemma.sol:33"
          },
          {
            "contract": "MCDEXLemma",
            "label": "collateralDecimals",
            "type": "t_uint256",
            "src": "contracts/wrappers/MCDEXLemma.sol:34"
          },
          {
            "contract": "MCDEXLemma",
            "label": "usdLemma",
            "type": "t_address",
            "src": "contracts/wrappers/MCDEXLemma.sol:36"
          },
          {
            "contract": "MCDEXLemma",
            "label": "reBalancer",
            "type": "t_address",
            "src": "contracts/wrappers/MCDEXLemma.sol:37"
          },
          {
            "contract": "MCDEXLemma",
            "label": "referrer",
            "type": "t_address",
            "src": "contracts/wrappers/MCDEXLemma.sol:38"
          },
          {
            "contract": "MCDEXLemma",
            "label": "entryFunding",
            "type": "t_int256",
            "src": "contracts/wrappers/MCDEXLemma.sol:40"
          },
          {
            "contract": "MCDEXLemma",
            "label": "realizedFundingPNL",
            "type": "t_int256",
            "src": "contracts/wrappers/MCDEXLemma.sol:41"
          },
          {
            "contract": "MCDEXLemma",
            "label": "positionAtSettlement",
            "type": "t_uint256",
            "src": "contracts/wrappers/MCDEXLemma.sol:43"
          },
          {
            "contract": "MCDEXLemma",
            "label": "maxPosition",
            "type": "t_uint256",
            "src": "contracts/wrappers/MCDEXLemma.sol:45"
          }
        ],
        "types": {
          "t_contract(ILiquidityPool)4343": {
            "label": "contract ILiquidityPool"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_contract(IERC20Upgradeable)979": {
            "label": "contract IERC20Upgradeable"
          },
          "t_address": {
            "label": "address"
          },
          "t_int256": {
            "label": "int256"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_bool": {
            "label": "bool"
          }
        }
      }
    }
  }
}
