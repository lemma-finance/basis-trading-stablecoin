{
  "address": "0xD84379CEae14AA33C123Af12424A37803F885889",
  "abi": [
    {
      "inputs": [],
      "name": "_beforeAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "collateralAmountRequiredInDecimals",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "deposit_test",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "prepare",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "collateralAmountRequiredInDecimals",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x4fe7def99fc80496cb9ad764689a715061cd04a30c771aecc062f983757d4814",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xD84379CEae14AA33C123Af12424A37803F885889",
    "transactionIndex": 0,
    "gasUsed": "6313911",
    "logsBloom": "0x
    "blockHash": "0x88f580eccf739afa68101dca319820cbc33ecddadd5629328dc6e1bf0c2eceae",
    "transactionHash": "0x4fe7def99fc80496cb9ad764689a715061cd04a30c771aecc062f983757d4814",
    "logs": [],
    "blockNumber": 87,
    "cumulativeGasUsed": "6313911",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "56240df7f5f66f7618b68619cf722d4c",
  "metadata": "{\"compiler\":{\"version\":\"0.8.3+commit.8d00100c\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"_beforeAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"collateralAmountRequiredInDecimals\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deposit_test\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"prepare\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"collateralAmountRequiredInDecimals\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/tests/USDLemma_Test.sol\":\"USDLemma_Test\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@giry/hardhat-test-solidity/test.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.0;\\n\\n// Should be kept in sync with ./lib.js\\n\\nlibrary Test {\\n  /* \\n   * Expect events from contracts\\n   */\\n  event ExpectFrom(address from);\\n\\n  // Usage: from a test contract `t`, call `expectFrom(a)`. \\n  // Any subsequent non-special event emitted by `t` will mean \\n  // \\\"I expect `a` to emit the exact same event\\\". \\n  // The order of expectations must be respected.\\n  function expectFrom(address from) internal {\\n    emit ExpectFrom(from);\\n  }\\n\\n\\n  /* \\n   * Boolean test\\n   */\\n  event TestTrue(bool success, string message);\\n\\n  // Succeed iff success is true\\n  function check(bool success, string memory message) internal {\\n    emit TestTrue(success, message);\\n  }\\n\\n\\n  /* \\n   * Always fail, always succeed\\n   */\\n  function fail(string memory message) internal {\\n    emit TestTrue(false, message);\\n  }\\n\\n  function succeed() internal {\\n    emit TestTrue(true, \\\"Success\\\");\\n  }\\n\\n  /* \\n   * Equality testing\\n   * ! overloaded as `eq` for everything except for bytes use `eq0`.\\n   */\\n\\n  // Bytes\\n  event TestEqBytes(bool success, bytes actual, bytes expected, string message);\\n\\n  function eq0(\\n    bytes memory actual,\\n    bytes memory expected,\\n    string memory message\\n  ) internal returns (bool) {\\n    bool success = keccak256((actual)) == keccak256((expected));\\n    emit TestEqBytes(success, actual, expected, message);\\n    return success;\\n  }\\n\\n   // Byte32\\n  event TestEqBytes32(\\n    bool success,\\n    bytes32 actual,\\n    bytes32 expected,\\n    string message\\n  );\\n\\n  function eq(\\n    bytes32 actual,\\n    bytes32 expected,\\n    string memory message\\n  ) internal returns (bool) {\\n    bool success = (actual == expected);\\n    emit TestEqBytes32(success, actual, expected, message);\\n    return success;\\n  }\\n\\n  // Bool\\n  event TestEqBool(bool success, bool actual, bool expected, string message);\\n  function eq(\\n    bool actual,\\n    bool expected,\\n    string memory message\\n  ) internal returns (bool) {\\n    bool success = (actual == expected);\\n    emit TestEqBool(success, actual, expected, message);\\n    return success;\\n  }\\n\\n  // uints\\n  event TestEqUint(bool success, uint actual, uint expected, string message);\\n\\n  function eq(\\n    uint actual,\\n    uint expected,\\n    string memory message\\n  ) internal returns (bool) {\\n    bool success = actual == expected;\\n    emit TestEqUint(success, actual, expected, message);\\n    return success;\\n  }\\n\\n  // strings\\n  event TestEqString(\\n    bool success,\\n    string actual,\\n    string expected,\\n    string message\\n  );\\n\\n  function eq(\\n    string memory actual,\\n    string memory expected,\\n    string memory message\\n  ) internal returns (bool) {\\n    bool success = keccak256(bytes((actual))) == keccak256(bytes((expected)));\\n    emit TestEqString(success, actual, expected, message);\\n    return success;\\n  }\\n\\n  // addresses\\n  event TestEqAddress(\\n    bool success,\\n    address actual,\\n    address expected,\\n    string message\\n  );\\n\\n\\n  function eq(\\n    address actual,\\n    address expected,\\n    string memory message\\n  ) internal returns (bool) {\\n    bool success = actual == expected;\\n    emit TestEqAddress(success, actual, expected, message);\\n    return success;\\n  }\\n\\n  /* \\n   * Inequality testing\\n   */\\n  event TestLess(bool success, uint actual, uint expected, string message);\\n  function less(\\n    uint actual,\\n    uint expected,\\n    string memory message\\n  ) internal returns (bool) {\\n    bool success = actual < expected;\\n    emit TestLess(success, actual, expected, message);\\n    return success;\\n  }\\n\\n  function more(\\n    uint actual,\\n    uint expected,\\n    string memory message\\n  ) internal returns (bool) {\\n    bool success = actual > expected;\\n    emit TestLess(success, actual, expected, message);\\n    return success;\\n  }\\n}\\n\\n// /* Either cast your arguments to address when you call balanceOf logging functions\\n//    or add `is address` to your ERC20s\\n//    or use the overloads with `address` types */\\ninterface ERC20BalanceOf {\\n  function balanceOf(address account) view external returns (uint);\\n}\\n\\n\\nlibrary Display {\\n  /* ****************************************************************\\n   * Register/read address->name mappings to make logs easier to read.\\n   *****************************************************************/\\n  /* \\n   * Names are stored in the contract using the library.\\n   */\\n\\n  // Disgusting hack so a library can manipulate storage refs.\\n  bytes32 constant NAMES_POS = keccak256(\\\"Display.NAMES_POS\\\");\\n  // Store mapping in library caller's storage.\\n  // That's quite fragile.\\n  struct Registers {\\n    mapping(address => string) map;\\n  }\\n\\n  // Also send mapping to javascript test interpreter.  The interpreter COULD\\n  // just make an EVM call to map every name but that would probably be very\\n  // slow.  So we cache locally.\\n  event Register(address addr, string name);\\n\\n  function registers() internal view returns (Registers storage) {\\n    this; // silence warning about pure mutability\\n    Registers storage regs;\\n    bytes32 _slot = NAMES_POS;\\n    assembly {\\n      regs.slot := _slot\\n    }\\n    return regs;\\n  }\\n\\n  /*\\n   * Give a name to an address for logging purposes\\n   * @example\\n   * ```solidity\\n   * address addr = address(new Contract());\\n   * register(addr,\\\"My Contract instance\\\");\\n   * ```\\n   */\\n\\n  function register(address addr, string memory name) internal {\\n    registers().map[addr] = name;\\n    emit Register(addr, name);\\n  }\\n\\n  /*\\n   * Read the name of a registered address. Default: \\\"<not found>\\\". \\n   */\\n  function nameOf(address addr) internal view returns (string memory) {\\n    string memory s = registers().map[addr];\\n    if (keccak256(bytes(s)) != keccak256(bytes(\\\"\\\"))) {\\n      return s;\\n    } else {\\n      return \\\"<not found>\\\";\\n    }\\n  }\\n\\n  /* 1 arg logging (string/uint) */\\n\\n  event LogString(string a);\\n\\n  function log(string memory a) internal {\\n    emit LogString(a);\\n  }\\n\\n  event LogUint(uint a);\\n\\n  function log(uint a) internal {\\n    emit LogUint(a);\\n  }\\n\\n  /* 2 arg logging (string/uint) */\\n\\n  event LogStringString(string a, string b);\\n\\n  function log(string memory a, string memory b) internal {\\n    emit LogStringString(a, b);\\n  }\\n\\n  event LogStringUint(string a, uint b);\\n\\n  function log(string memory a, uint b) internal {\\n    emit LogStringUint(a, b);\\n  }\\n\\n  event LogUintUint(uint a, uint b);\\n\\n  function log(uint a, uint b) internal {\\n    emit LogUintUint(a, b);\\n  }\\n\\n  event LogUintString(uint a, string b);\\n\\n  function log(uint a, string memory b) internal {\\n    emit LogUintString(a, b);\\n  }\\n\\n  /* 3 arg logging (string/uint) */\\n\\n  event LogStringStringString(string a, string b, string c);\\n\\n  function log(\\n    string memory a,\\n    string memory b,\\n    string memory c\\n  ) internal {\\n    emit LogStringStringString(a, b, c);\\n  }\\n\\n  event LogStringStringUint(string a, string b, uint c);\\n\\n  function log(\\n    string memory a,\\n    string memory b,\\n    uint c\\n  ) internal {\\n    emit LogStringStringUint(a, b, c);\\n  }\\n\\n  event LogStringUintUint(string a, uint b, uint c);\\n\\n  function log(\\n    string memory a,\\n    uint b,\\n    uint c\\n  ) internal {\\n    emit LogStringUintUint(a, b, c);\\n  }\\n\\n  event LogStringUintString(string a, uint b, string c);\\n\\n  function log(\\n    string memory a,\\n    uint b,\\n    string memory c\\n  ) internal {\\n    emit LogStringUintString(a, b, c);\\n  }\\n\\n  event LogUintUintUint(uint a, uint b, uint c);\\n\\n  function log(\\n    uint a,\\n    uint b,\\n    uint c\\n  ) internal {\\n    emit LogUintUintUint(a, b, c);\\n  }\\n\\n  event LogUintStringUint(uint a, string b, uint c);\\n\\n  function log(\\n    uint a,\\n    string memory b,\\n    uint c\\n  ) internal {\\n    emit LogUintStringUint(a, b, c);\\n  }\\n\\n  event LogUintStringString(uint a, string b, string c);\\n\\n  function log(\\n    uint a,\\n    string memory b,\\n    string memory c\\n  ) internal {\\n    emit LogUintStringString(a, b, c);\\n  }\\n\\n  /* End of register/read section */\\n  event ERC20Balances(address[] tokens, address[] accounts, uint[] balances);\\n\\n  function logBalances(\\n    address[1] memory _tokens, \\n    address _a0\\n  ) internal {\\n    address[] memory tokens = new address[](1);\\n    tokens[0] = _tokens[0];\\n    address[] memory accounts = new address[](1);\\n    accounts[0] = _a0;\\n    logBalances(tokens, accounts);\\n  }\\n\\n  function logBalances(\\n    address[1] memory _tokens,\\n    address _a0,\\n    address _a1\\n  ) internal {\\n    address[] memory tokens = new address[](1);\\n    tokens[0] = _tokens[0];\\n    address[] memory accounts = new address[](2);\\n    accounts[0] = _a0;\\n    accounts[1] = _a1;\\n    logBalances(tokens, accounts);\\n  }\\n\\n  function logBalances(\\n    address[1] memory _tokens,\\n    address _a0,\\n    address _a1,\\n    address _a2\\n  ) internal {\\n    address[] memory tokens = new address[](1);\\n    tokens[0] = _tokens[0];\\n    address[] memory accounts = new address[](3);\\n    accounts[0] = _a0;\\n    accounts[1] = _a1;\\n    accounts[2] = _a2;\\n    logBalances(tokens, accounts);\\n  }\\n\\n  function logBalances(\\n    address[2] memory _tokens,\\n    address _a0\\n  ) internal {\\n    address[] memory tokens = new address[](2);\\n    tokens[0] = _tokens[0];\\n    tokens[1] = _tokens[1];\\n    address[] memory accounts = new address[](1);\\n    accounts[0] = _a0;\\n    logBalances(tokens, accounts);\\n  }\\n\\n  function logBalances(\\n    address[2] memory _tokens,\\n    address _a0,\\n    address _a1\\n  ) internal {\\n    address[] memory tokens = new address[](2);\\n    tokens[0] = _tokens[0];\\n    tokens[1] = _tokens[1];\\n    address[] memory accounts = new address[](2);\\n    accounts[0] = _a0;\\n    accounts[1] = _a1;\\n    logBalances(tokens, accounts);\\n  }\\n\\n  function logBalances(\\n    address[2] memory _tokens,\\n    address _a0,\\n    address _a1,\\n    address _a2\\n  ) internal {\\n    address[] memory tokens = new address[](2);\\n    tokens[0] = _tokens[0];\\n    tokens[1] = _tokens[1];\\n    address[] memory accounts = new address[](3);\\n    accounts[0] = _a0;\\n    accounts[1] = _a1;\\n    accounts[2] = _a2;\\n    logBalances(tokens, accounts);\\n  }\\n\\n  /* takes [t1,...,tM], [a1,...,aN]\\n       logs also [...b(t1,aj) ... b(tM,aj) ...] */\\n\\n  function logBalances(address[] memory tokens, address[] memory accounts)\\n    internal\\n  {\\n    uint[] memory balances = new uint[](tokens.length * accounts.length);\\n    for (uint i = 0; i < tokens.length; i++) {\\n      for (uint j = 0; j < accounts.length; j++) {\\n        uint bal = ERC20BalanceOf(tokens[i]).balanceOf(accounts[j]);\\n        balances[i * accounts.length + j] = bal;\\n        //console.log(tokens[i].symbol(),nameOf(accounts[j]),bal);\\n      }\\n    }\\n    emit ERC20Balances(tokens, accounts, balances);\\n  }\\n\\n}\",\"keccak256\":\"0xcae72a10b1d7790ea9e770324f14bdbbfae60e90b222b83300868881ad649bc6\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal initializer {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x35b09b69aca3bc2633da8f47382a81ecf367efe57167a2114f60f9ec81988afa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/metatx/ERC2771ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Context variant with ERC2771 support.\\n */\\nabstract contract ERC2771ContextUpgradeable is Initializable, ContextUpgradeable {\\n    address private _trustedForwarder;\\n\\n    function __ERC2771Context_init(address trustedForwarder) internal initializer {\\n        __Context_init_unchained();\\n        __ERC2771Context_init_unchained(trustedForwarder);\\n    }\\n\\n    function __ERC2771Context_init_unchained(address trustedForwarder) internal initializer {\\n        _trustedForwarder = trustedForwarder;\\n    }\\n\\n    function isTrustedForwarder(address forwarder) public view virtual returns (bool) {\\n        return forwarder == _trustedForwarder;\\n    }\\n\\n    function _msgSender() internal view virtual override returns (address sender) {\\n        if (isTrustedForwarder(msg.sender)) {\\n            // The assembly code is more direct than the Solidity version using `abi.decode`.\\n            assembly {\\n                sender := shr(96, calldataload(sub(calldatasize(), 20)))\\n            }\\n        } else {\\n            return super._msgSender();\\n        }\\n    }\\n\\n    function _msgData() internal view virtual override returns (bytes calldata) {\\n        if (isTrustedForwarder(msg.sender)) {\\n            return msg.data[:msg.data.length - 20];\\n        } else {\\n            return super._msgData();\\n        }\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x16ab179d5b3cdc3d8b1d3ab8314d4e93c5e53c1d4a6b04060e6be7084752a1fc\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8b2abd85d0ece7e866e100e9d47ca9cbec93c87cf71a8d267b2b93eb81f7d5e9\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20Upgradeable.sol\\\";\\nimport \\\"./extensions/IERC20MetadataUpgradeable.sol\\\";\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable, IERC20MetadataUpgradeable {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    function __ERC20_init(string memory name_, string memory symbol_) internal initializer {\\n        __Context_init_unchained();\\n        __ERC20_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal initializer {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n        unchecked {\\n            _approve(sender, _msgSender(), currentAllowance - amount);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(senderBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[sender] = senderBalance - amount;\\n        }\\n        _balances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n\\n        _afterTokenTransfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n    uint256[45] private __gap;\\n}\\n\",\"keccak256\":\"0x891fbf39ac5b9524f417db912d33684f239195a0fc5c11db439659676e51aab6\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xf449ca0a763d4b1b4462cf8706857074492f324020a2b9d099181b5383055ad3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x6795c369a4eefa78468e38966f7851fbc2dda5e5b9ccd3fa2b45970e2e4d3abd\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./draft-IERC20PermitUpgradeable.sol\\\";\\nimport \\\"../ERC20Upgradeable.sol\\\";\\nimport \\\"../../../utils/cryptography/draft-EIP712Upgradeable.sol\\\";\\nimport \\\"../../../utils/cryptography/ECDSAUpgradeable.sol\\\";\\nimport \\\"../../../utils/CountersUpgradeable.sol\\\";\\nimport \\\"../../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on `{IERC20-approve}`, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * _Available since v3.4._\\n */\\nabstract contract ERC20PermitUpgradeable is Initializable, ERC20Upgradeable, IERC20PermitUpgradeable, EIP712Upgradeable {\\n    using CountersUpgradeable for CountersUpgradeable.Counter;\\n\\n    mapping(address => CountersUpgradeable.Counter) private _nonces;\\n\\n    // solhint-disable-next-line var-name-mixedcase\\n    bytes32 private _PERMIT_TYPEHASH;\\n\\n    /**\\n     * @dev Initializes the {EIP712} domain separator using the `name` parameter, and setting `version` to `\\\"1\\\"`.\\n     *\\n     * It's a good idea to use the same `name` that is defined as the ERC20 token name.\\n     */\\n    function __ERC20Permit_init(string memory name) internal initializer {\\n        __Context_init_unchained();\\n        __EIP712_init_unchained(name, \\\"1\\\");\\n        __ERC20Permit_init_unchained(name);\\n    }\\n\\n    function __ERC20Permit_init_unchained(string memory name) internal initializer {\\n        _PERMIT_TYPEHASH = keccak256(\\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\");}\\n\\n    /**\\n     * @dev See {IERC20Permit-permit}.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public virtual override {\\n        require(block.timestamp <= deadline, \\\"ERC20Permit: expired deadline\\\");\\n\\n        bytes32 structHash = keccak256(abi.encode(_PERMIT_TYPEHASH, owner, spender, value, _useNonce(owner), deadline));\\n\\n        bytes32 hash = _hashTypedDataV4(structHash);\\n\\n        address signer = ECDSAUpgradeable.recover(hash, v, r, s);\\n        require(signer == owner, \\\"ERC20Permit: invalid signature\\\");\\n\\n        _approve(owner, spender, value);\\n    }\\n\\n    /**\\n     * @dev See {IERC20Permit-nonces}.\\n     */\\n    function nonces(address owner) public view virtual override returns (uint256) {\\n        return _nonces[owner].current();\\n    }\\n\\n    /**\\n     * @dev See {IERC20Permit-DOMAIN_SEPARATOR}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view override returns (bytes32) {\\n        return _domainSeparatorV4();\\n    }\\n\\n    /**\\n     * @dev \\\"Consume a nonce\\\": return the current value and increment.\\n     *\\n     * _Available since v4.1._\\n     */\\n    function _useNonce(address owner) internal virtual returns (uint256 current) {\\n        CountersUpgradeable.Counter storage nonce = _nonces[owner];\\n        current = nonce.current();\\n        nonce.increment();\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xf07c1013d0ecf7a80ff5bf8f59105fc0acc5bf83aa4196b409d9ac3666d37cc6\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20PermitUpgradeable {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x4e321ee7110594e92c1c834d7de2fbdfd01fbed6c06127fe75c5836fe80a24a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x946f08c0a132c5877d458d7af7956da60607f20a5c03dd75760708c848aae6b7\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x062b5a0f7cc6b0528fa350033759f3a15ba42afb57423d7c593753860f2c82e0\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary CountersUpgradeable {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0x00c96e792d367a436015f12ce2665aa8e2a0d61d2c6045a82cbb37da20e5a042\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSAUpgradeable {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        } else if (error == RecoverError.InvalidSignatureV) {\\n            revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        // Check the signature length\\n        // - case 65: r,s,v signature (standard)\\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else if (signature.length == 64) {\\n            bytes32 r;\\n            bytes32 vs;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                vs := mload(add(signature, 0x40))\\n            }\\n            return tryRecover(hash, r, vs);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s;\\n        uint8 v;\\n        assembly {\\n            s := and(vs, 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\\n            v := add(shr(255, vs), 27)\\n        }\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n        if (v != 27 && v != 28) {\\n            return (address(0), RecoverError.InvalidSignatureV);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0x07411372282794f7ecde69a1065e5d20441abe7c9f8861437b4d45c9a4712fa6\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ECDSAUpgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\\n *\\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\\n *\\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\\n * ({_hashTypedDataV4}).\\n *\\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\\n * the chain id to protect against replay attacks on an eventual fork of the chain.\\n *\\n * NOTE: This contract implements the version of the encoding known as \\\"v4\\\", as implemented by the JSON RPC method\\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\\n *\\n * _Available since v3.4._\\n */\\nabstract contract EIP712Upgradeable is Initializable {\\n    /* solhint-disable var-name-mixedcase */\\n    bytes32 private _HASHED_NAME;\\n    bytes32 private _HASHED_VERSION;\\n    bytes32 private constant _TYPE_HASH = keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\");\\n\\n    /* solhint-enable var-name-mixedcase */\\n\\n    /**\\n     * @dev Initializes the domain separator and parameter caches.\\n     *\\n     * The meaning of `name` and `version` is specified in\\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\\n     *\\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\\n     * - `version`: the current major version of the signing domain.\\n     *\\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\\n     * contract upgrade].\\n     */\\n    function __EIP712_init(string memory name, string memory version) internal initializer {\\n        __EIP712_init_unchained(name, version);\\n    }\\n\\n    function __EIP712_init_unchained(string memory name, string memory version) internal initializer {\\n        bytes32 hashedName = keccak256(bytes(name));\\n        bytes32 hashedVersion = keccak256(bytes(version));\\n        _HASHED_NAME = hashedName;\\n        _HASHED_VERSION = hashedVersion;\\n    }\\n\\n    /**\\n     * @dev Returns the domain separator for the current chain.\\n     */\\n    function _domainSeparatorV4() internal view returns (bytes32) {\\n        return _buildDomainSeparator(_TYPE_HASH, _EIP712NameHash(), _EIP712VersionHash());\\n    }\\n\\n    function _buildDomainSeparator(\\n        bytes32 typeHash,\\n        bytes32 nameHash,\\n        bytes32 versionHash\\n    ) private view returns (bytes32) {\\n        return keccak256(abi.encode(typeHash, nameHash, versionHash, block.chainid, address(this)));\\n    }\\n\\n    /**\\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\\n     * function returns the hash of the fully encoded EIP712 message for this domain.\\n     *\\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\\n     *\\n     * ```solidity\\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\\n     *     keccak256(\\\"Mail(address to,string contents)\\\"),\\n     *     mailTo,\\n     *     keccak256(bytes(mailContents))\\n     * )));\\n     * address signer = ECDSA.recover(digest, signature);\\n     * ```\\n     */\\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\\n        return ECDSAUpgradeable.toTypedDataHash(_domainSeparatorV4(), structHash);\\n    }\\n\\n    /**\\n     * @dev The hash of the name parameter for the EIP712 domain.\\n     *\\n     * NOTE: This function reads from storage by default, but can be redefined to return a constant value if gas costs\\n     * are a concern.\\n     */\\n    function _EIP712NameHash() internal virtual view returns (bytes32) {\\n        return _HASHED_NAME;\\n    }\\n\\n    /**\\n     * @dev The hash of the version parameter for the EIP712 domain.\\n     *\\n     * NOTE: This function reads from storage by default, but can be redefined to return a constant value if gas costs\\n     * are a concern.\\n     */\\n    function _EIP712VersionHash() internal virtual view returns (bytes32) {\\n        return _HASHED_VERSION;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x30f3940c119b4d93578bac394f43ee9b0b8465ea1e60b316244183be2983a5ed\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/SafeCastUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n *\\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\\n * all math on `uint256` and `int256` and then downcasting.\\n */\\nlibrary SafeCastUpgradeable {\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        require(value <= type(uint224).max, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        require(value <= type(uint128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        require(value <= type(uint96).max, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        require(value <= type(uint64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        require(value <= type(uint32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        require(value <= type(uint16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        require(value <= type(uint8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        require(value >= 0, \\\"SafeCast: value must be positive\\\");\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt128(int256 value) internal pure returns (int128) {\\n        require(value >= type(int128).min && value <= type(int128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return int128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt64(int256 value) internal pure returns (int64) {\\n        require(value >= type(int64).min && value <= type(int64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return int64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt32(int256 value) internal pure returns (int32) {\\n        require(value >= type(int32).min && value <= type(int32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return int32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt16(int256 value) internal pure returns (int16) {\\n        require(value >= type(int16).min && value <= type(int16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return int16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt8(int256 value) internal pure returns (int8) {\\n        require(value >= type(int8).min && value <= type(int8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return int8(value);\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        require(value <= uint256(type(int256).max), \\\"SafeCast: value doesn't fit in an int256\\\");\\n        return int256(value);\\n    }\\n}\\n\",\"keccak256\":\"0xb92541cd02568981bc3dac94060d542ab3231d8f30ade82aeba0588761c1b649\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMathUpgradeable {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x603946f0dc2541ff45f4b5cb1424ed1870eb24f3396cd318b1996e7e65278907\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/SignedSafeMathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SignedSafeMath` is no longer needed starting with Solidity 0.8. The compiler\\n * now has built in overflow checking.\\n */\\nlibrary SignedSafeMathUpgradeable {\\n    /**\\n     * @dev Returns the multiplication of two signed integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(int256 a, int256 b) internal pure returns (int256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two signed integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(int256 a, int256 b) internal pure returns (int256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two signed integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(int256 a, int256 b) internal pure returns (int256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two signed integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(int256 a, int256 b) internal pure returns (int256) {\\n        return a + b;\\n    }\\n}\\n\",\"keccak256\":\"0x4b6907e797f669ecd6b937478dfa7936b62ed44519fa981261dc8fdc0072719b\",\"license\":\"MIT\"},\"contracts/USDLemma.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.3;\\nimport { IERC20Upgradeable } from \\\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\\\";\\nimport { ERC20PermitUpgradeable } from \\\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol\\\";\\nimport { OwnableUpgradeable, ContextUpgradeable } from \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport { ERC2771ContextUpgradeable } from \\\"@openzeppelin/contracts-upgradeable/metatx/ERC2771ContextUpgradeable.sol\\\";\\nimport { SafeCastUpgradeable } from \\\"@openzeppelin/contracts-upgradeable/utils/math/SafeCastUpgradeable.sol\\\";\\nimport { Utils } from \\\"./libraries/Utils.sol\\\";\\nimport { SafeMathExt } from \\\"./libraries/SafeMathExt.sol\\\";\\nimport { IPerpetualDEXWrapper } from \\\"./interfaces/IPerpetualDEXWrapper.sol\\\";\\n\\n/// @author Lemma Finance\\ncontract USDLemma is ERC20PermitUpgradeable, OwnableUpgradeable, ERC2771ContextUpgradeable {\\n    using SafeCastUpgradeable for int256;\\n    using SafeMathExt for int256;\\n    using SafeMathExt for uint256;\\n\\n    address public lemmaTreasury;\\n    address public stakingContractAddress;\\n    uint256 public fees;\\n\\n    mapping(uint256 => mapping(address => address)) public perpetualDEXWrappers;\\n\\n    function initialize(\\n        address trustedForwarder,\\n        address collateralAddress,\\n        address perpetualDEXWrapperAddress\\n    ) external initializer {\\n        __Ownable_init();\\n        __ERC20_init(\\\"USDLemma\\\", \\\"USDL\\\");\\n        __ERC20Permit_init(\\\"USDLemma\\\");\\n        __ERC2771Context_init(trustedForwarder);\\n        addPerpetualDEXWrapper(0, collateralAddress, perpetualDEXWrapperAddress);\\n    }\\n\\n    /// @notice Set staking contract address, can only be called by owner\\n    /// @param _stakingContractAddress Address of staking contract\\n    function setStakingContractAddress(address _stakingContractAddress) public onlyOwner {\\n        stakingContractAddress = _stakingContractAddress;\\n    }\\n\\n    /// @notice Set Lemma treasury, can only be called by owner\\n    /// @param _lemmaTreasury Address of Lemma Treasury\\n    function setLemmaTreasury(address _lemmaTreasury) public onlyOwner {\\n        lemmaTreasury = _lemmaTreasury;\\n    }\\n\\n    /// @notice Set Fees, can only be called by owner\\n    /// @param _fees Fees taken by the protocol\\n    function setFees(uint256 _fees) public onlyOwner {\\n        fees = _fees;\\n    }\\n\\n    /// @notice Add address for perpetual dex wrapper for perpetual index and collateral, can only be called by owner\\n    /// @param perpetualDEXIndex, index of perpetual dex\\n    /// @param collateralAddress, address of collateral to be used in the dex\\n    /// @param perpetualDEXWrapperAddress, address of perpetual dex wrapper\\n    function addPerpetualDEXWrapper(\\n        uint256 perpetualDEXIndex,\\n        address collateralAddress,\\n        address perpetualDEXWrapperAddress\\n    ) public onlyOwner {\\n        perpetualDEXWrappers[perpetualDEXIndex][collateralAddress] = perpetualDEXWrapperAddress;\\n    }\\n\\n    /// @notice Deposit collateral like WETH, WBTC, etc. to mint USDL\\n    /// @param to Receipent of minted USDL\\n    /// @param amount Amount of USDL to mint\\n    /// @param perpetualDEXIndex Index of perpetual dex, where position will be opened\\n    /// @param maxCollateralRequired Maximum amount of collateral to be used to mint given USDL\\n    /// @param collateral Collateral to be used to mint USDL\\n    function depositTo(\\n        address to,\\n        uint256 amount,\\n        uint256 perpetualDEXIndex,\\n        uint256 maxCollateralRequired,\\n        IERC20Upgradeable collateral\\n    ) public {\\n        IPerpetualDEXWrapper perpDEXWrapper = IPerpetualDEXWrapper(\\n            perpetualDEXWrappers[perpetualDEXIndex][address(collateral)]\\n        );\\n        uint256 collateralRequired = perpDEXWrapper.getCollateralAmountGivenUnderlyingAssetAmount(amount, true);\\n        collateralRequired = perpDEXWrapper.getAmountInCollateralDecimals(collateralRequired, true);\\n        require(collateralRequired <= maxCollateralRequired, \\\"collateral required execeeds maximum\\\");\\n        collateral.transferFrom(_msgSender(), address(perpDEXWrapper), collateralRequired);\\n        perpDEXWrapper.open(amount);\\n        _mint(to, amount);\\n    }\\n\\n    /// @notice Redeem USDL and withdraw collateral like WETH, WBTC, etc\\n    /// @param to Receipent of withdrawn collateral\\n    /// @param amount Amount of USDL to redeem\\n    /// @param perpetualDEXIndex Index of perpetual dex, where position will be closed\\n    /// @param minCollateralToGetBack Minimum amount of collateral to get back on redeeming given USDL\\n    /// @param collateral Collateral to be used to redeem USDL\\n    function withdrawTo(\\n        address to,\\n        uint256 amount,\\n        uint256 perpetualDEXIndex,\\n        uint256 minCollateralToGetBack,\\n        IERC20Upgradeable collateral\\n    ) public {\\n        _burn(_msgSender(), amount);\\n        IPerpetualDEXWrapper perpDEXWrapper = IPerpetualDEXWrapper(\\n            perpetualDEXWrappers[perpetualDEXIndex][address(collateral)]\\n        );\\n        uint256 collateralToGetBack = perpDEXWrapper.getCollateralAmountGivenUnderlyingAssetAmount(amount, false);\\n        collateralToGetBack = perpDEXWrapper.getAmountInCollateralDecimals(collateralToGetBack, false);\\n        require(collateralToGetBack >= minCollateralToGetBack, \\\"collateral got back is too low\\\");\\n        perpDEXWrapper.close(amount);\\n        collateral.transfer(to, collateralToGetBack);\\n    }\\n\\n    /// @notice Deposit collateral like WETH, WBTC, etc. to mint USDL\\n    /// @param amount Amount of USDL to mint\\n    /// @param perpetualDEXIndex Index of perpetual dex, where position will be opened\\n    /// @param maxCollateralRequired Maximum amount of collateral to be used to mint given USDL\\n    /// @param collateral Collateral to be used to mint USDL\\n    function deposit(\\n        uint256 amount,\\n        uint256 perpetualDEXIndex,\\n        uint256 maxCollateralRequired,\\n        IERC20Upgradeable collateral\\n    ) external {\\n        depositTo(_msgSender(), amount, perpetualDEXIndex, maxCollateralRequired, collateral);\\n    }\\n\\n    /// @notice Redeem USDL and withdraw collateral like WETH, WBTC, etc\\n    /// @param amount Amount of USDL to redeem\\n    /// @param perpetualDEXIndex Index of perpetual dex, where position will be closed\\n    /// @param minCollateralToGetBack Minimum amount of collateral to get back on redeeming given USDL\\n    /// @param collateral Collateral to be used to redeem USDL\\n    function withdraw(\\n        uint256 amount,\\n        uint256 perpetualDEXIndex,\\n        uint256 minCollateralToGetBack,\\n        IERC20Upgradeable collateral\\n    ) external {\\n        withdrawTo(_msgSender(), amount, perpetualDEXIndex, minCollateralToGetBack, collateral);\\n    }\\n\\n    /// @notice Rebalance position on a dex to reinvest if funding rate positive and burn USDL if funding rate negative\\n    /// @param perpetualDEXIndex Index of perpetual dex, where position will be rebalanced\\n    /// @param collateral Collateral to be used to rebalance position\\n    /// @param amount amount of USDL to burn or mint\\n    /// @param data data used to rebalance for perpetual data\\n    function reBalance(\\n        uint256 perpetualDEXIndex,\\n        IERC20Upgradeable collateral,\\n        int256 amount,\\n        bytes calldata data\\n    ) external {\\n        IPerpetualDEXWrapper perpDEXWrapper = IPerpetualDEXWrapper(\\n            perpetualDEXWrappers[perpetualDEXIndex][address(collateral)]\\n        );\\n        require(perpDEXWrapper.reBalance(msg.sender, amount, data), \\\"rebalance not done\\\");\\n        //burn or mint from the staker contract\\n        if (amount >= 0) {\\n            uint256 totalAmountToMint = amount.toUint256();\\n            uint256 amountToLemmaTreasury = (totalAmountToMint * fees) / 10**4;\\n            uint256 amountToStakingContract = totalAmountToMint - amountToLemmaTreasury;\\n            _mint(lemmaTreasury, amountToLemmaTreasury);\\n            _mint(stakingContractAddress, amountToStakingContract);\\n        } else {\\n            uint256 totalAmountToBurn = amount.neg().toUint256();\\n            uint256 balanceOfStakingContract = balanceOf(stakingContractAddress).min(\\n                allowance(stakingContractAddress, address(this))\\n            );\\n            uint256 balanceOfLemmaTreasury = balanceOf(lemmaTreasury).min(allowance(lemmaTreasury, address(this)));\\n\\n            uint256 amountBurntFromStakingContract = balanceOfStakingContract.min(totalAmountToBurn);\\n            uint256 amountBurntFromLemmaTreasury = balanceOfLemmaTreasury.min(\\n                totalAmountToBurn - amountBurntFromStakingContract\\n            );\\n            if (amountBurntFromStakingContract > 0) {\\n                _burnFrom(stakingContractAddress, amountBurntFromStakingContract);\\n            }\\n            if (amountBurntFromLemmaTreasury > 0) {\\n                _burnFrom(lemmaTreasury, amountBurntFromLemmaTreasury);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev This is a slightly different implementation of _burnFrom then usually seen.\\n     * Destroys `amount` tokens from `account`, deducting from this contract's\\n     * allowance.(instead of _msgSender()'s)\\n     *\\n     *\\n     * Requirements:\\n     *\\n     * - this contract must have allowance for ``accounts``'s tokens of at least\\n     * `amount`.\\n     */\\n    function _burnFrom(address account, uint256 amount) internal {\\n        uint256 currentAllowance = allowance(account, address(this));\\n        require(currentAllowance >= amount, \\\"ERC20: burn amount exceeds allowance\\\");\\n        unchecked {\\n            _approve(account, address(this), currentAllowance - amount);\\n        }\\n        _burn(account, amount);\\n    }\\n\\n    function _msgSender()\\n        internal\\n        view\\n        virtual\\n        override(ContextUpgradeable, ERC2771ContextUpgradeable)\\n        returns (address sender)\\n    {\\n        //ERC2771ContextUpgradeable._msgSender();\\n        return super._msgSender();\\n    }\\n\\n    function _msgData()\\n        internal\\n        view\\n        virtual\\n        override(ContextUpgradeable, ERC2771ContextUpgradeable)\\n        returns (bytes calldata)\\n    {\\n        //ERC2771ContextUpgradeable._msgData();\\n        return super._msgData();\\n    }\\n}\\n\",\"keccak256\":\"0xeadad90502a075261de17fbedb8ec8b69c818d4a64a9686cbaa782578f1d0aee\",\"license\":\"MIT\"},\"contracts/interfaces/IPerpetualDEXWrapper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.3;\\n\\ninterface IPerpetualDEXWrapper {\\n    function open(uint256 amount) external;\\n\\n    function close(uint256 amount) external;\\n\\n    function getCollateralAmountGivenUnderlyingAssetAmount(uint256 amount, bool isShorting)\\n        external\\n        returns (uint256 collateralAmountRequired);\\n\\n    function reBalance(\\n        address _reBalancer,\\n        int256 amount,\\n        bytes calldata data\\n    ) external returns (bool);\\n\\n    function getAmountInCollateralDecimals(uint256 amount, bool roundUp) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xf592aea4895caec7ed387f4c41685b2504b1fc99fa0e40bb0f258dc8074e62f7\",\"license\":\"MIT\"},\"contracts/interfaces/MCDEX/ILiquidityPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.3;\\n\\n/**\\n * @notice  Perpetual state:\\n *          - INVALID:      Uninitialized or not non-existent perpetual;\\n *          - INITIALIZING: Only when LiquidityPoolStorage.isRunning == false. Traders cannot perform operations;\\n *          - NORMAL:       Full functional state. Traders is able to perform all operations;\\n *          - EMERGENCY:    Perpetual is unsafe and only clear is available;\\n *          - CLEARED:      All margin account is cleared. Trade could withdraw remaining margin balance.\\n */\\nenum PerpetualState {\\n    INVALID,\\n    INITIALIZING,\\n    NORMAL,\\n    EMERGENCY,\\n    CLEARED\\n}\\n\\ninterface ILiquidityPool {\\n    /**\\n     * @notice Get the info of the liquidity pool\\n     * @return isRunning True if the liquidity pool is running\\n     * @return isFastCreationEnabled True if the operator of the liquidity pool is allowed to create new perpetual\\n     *                               when the liquidity pool is running\\n     * @return addresses The related addresses of the liquidity pool\\n     * @return intNums Int type properties, see below for details.\\n     * @return uintNums Uint type properties, see below for details.\\n     */\\n    function getLiquidityPoolInfo()\\n        external\\n        view\\n        returns (\\n            bool isRunning,\\n            bool isFastCreationEnabled,\\n            // [0] creator,\\n            // [1] operator,\\n            // [2] transferringOperator,\\n            // [3] governor,\\n            // [4] shareToken,\\n            // [5] collateralToken,\\n            // [6] vault,\\n            address[7] memory addresses,\\n            // [0] vaultFeeRate,\\n            // [1] poolCash,\\n            // [2] insuranceFundCap,\\n            // [3] insuranceFund,\\n            // [4] donatedInsuranceFund,\\n            int256[5] memory intNums,\\n            // [0] collateralDecimals,\\n            // [1] perpetualCount\\n            // [2] fundingTime,\\n            // [3] operatorExpiration,\\n            uint256[4] memory uintNums\\n        );\\n\\n    /**\\n     * @notice Get the info of the perpetual. Need to update the funding state and the oracle price\\n     *         of each perpetual before and update the funding rate of each perpetual after\\n     * @param perpetualIndex The index of the perpetual in the liquidity pool\\n     * @return state The state of the perpetual\\n     * @return oracle The oracle's address of the perpetual\\n     * @return nums The related numbers of the perpetual\\n     */\\n    function getPerpetualInfo(uint256 perpetualIndex)\\n        external\\n        view\\n        returns (\\n            PerpetualState state,\\n            address oracle,\\n            // [0] totalCollateral\\n            // [1] markPrice, (return settlementPrice if it is in EMERGENCY state)\\n            // [2] indexPrice,\\n            // [3] fundingRate,\\n            // [4] unitAccumulativeFunding,\\n            // [5] initialMarginRate,\\n            // [6] maintenanceMarginRate,\\n            // [7] operatorFeeRate,\\n            // [8] lpFeeRate,\\n            // [9] referralRebateRate,\\n            // [10] liquidationPenaltyRate,\\n            // [11] keeperGasReward,\\n            // [12] insuranceFundRate,\\n            // [13-15] halfSpread value, min, max,\\n            // [16-18] openSlippageFactor value, min, max,\\n            // [19-21] closeSlippageFactor value, min, max,\\n            // [22-24] fundingRateLimit value, min, max,\\n            // [25-27] ammMaxLeverage value, min, max,\\n            // [28-30] maxClosePriceDiscount value, min, max,\\n            // [31] openInterest,\\n            // [32] maxOpenInterestRate,\\n            // [33-35] fundingRateFactor value, min, max,\\n            // [36-38] defaultTargetLeverage value, min, max,\\n            int256[39] memory nums\\n        );\\n\\n    /**\\n     * @notice Get the account info of the trader. Need to update the funding state and the oracle price\\n     *         of each perpetual before and update the funding rate of each perpetual after\\n     * @param perpetualIndex The index of the perpetual in the liquidity pool\\n     * @param trader The address of the trader\\n     * @return cash The cash(collateral) of the account\\n     * @return position The position of the account\\n     * @return availableMargin The available margin of the account\\n     * @return margin The margin of the account\\n     * @return settleableMargin The settleable margin of the account\\n     * @return isInitialMarginSafe True if the account is initial margin safe\\n     * @return isMaintenanceMarginSafe True if the account is maintenance margin safe\\n     * @return isMarginSafe True if the total value of margin account is beyond 0\\n     * @return targetLeverage   The target leverage for openning position.\\n     */\\n    function getMarginAccount(uint256 perpetualIndex, address trader)\\n        external\\n        view\\n        returns (\\n            int256 cash,\\n            int256 position,\\n            int256 availableMargin,\\n            int256 margin,\\n            int256 settleableMargin,\\n            bool isInitialMarginSafe,\\n            bool isMaintenanceMarginSafe,\\n            bool isMarginSafe, // bankrupt\\n            int256 targetLeverage\\n        );\\n\\n    /**\\n     * @notice Initialize the liquidity pool and set up its configuration.\\n     *\\n     * @param operator              The operator's address of the liquidity pool.\\n     * @param collateral            The collateral's address of the liquidity pool.\\n     * @param collateralDecimals    The collateral's decimals of the liquidity pool.\\n     * @param governor              The governor's address of the liquidity pool.\\n     * @param initData              A bytes array contains data to initialize new created liquidity pool.\\n     */\\n    function initialize(\\n        address operator,\\n        address collateral,\\n        uint256 collateralDecimals,\\n        address governor,\\n        bytes calldata initData\\n    ) external;\\n\\n    /**\\n     * @notice  Deposit collateral to the perpetual.\\n     *          Can only called when the perpetual's state is \\\"NORMAL\\\".\\n     *          This method will always increase `cash` amount in trader's margin account.\\n     *\\n     * @param   perpetualIndex  The index of the perpetual in the liquidity pool.\\n     * @param   trader          The address of the trader.\\n     * @param   amount          The amount of collatetal to deposit. The amount always use decimals 18.\\n     */\\n    function deposit(\\n        uint256 perpetualIndex,\\n        address trader,\\n        int256 amount\\n    ) external;\\n\\n    /**\\n     * @notice  Withdraw collateral from the trader's account of the perpetual.\\n     *          After withdrawn, trader shall at least has maintenance margin left in account.\\n     *          Can only called when the perpetual's state is \\\"NORMAL\\\".\\n     *          Margin account must at least keep\\n     *          The trader's cash will decrease in the perpetual.\\n     *          Need to update the funding state and the oracle price of each perpetual before\\n     *          and update the funding rate of each perpetual after\\n     *\\n     * @param   perpetualIndex  The index of the perpetual in the liquidity pool.\\n     * @param   trader          The address of the trader.\\n     * @param   amount          The amount of collatetal to withdraw. The amount always use decimals 18.\\n     */\\n    function withdraw(\\n        uint256 perpetualIndex,\\n        address trader,\\n        int256 amount\\n    ) external;\\n\\n    /**\\n     * @notice Trade with AMM in the perpetual, require sender is granted the trade privilege by the trader.\\n     *         The trading price is determined by the AMM based on the index price of the perpetual.\\n     *         Trader must be initial margin safe if opening position and margin safe if closing position\\n     * @param perpetualIndex The index of the perpetual in the liquidity pool\\n     * @param trader The address of trader\\n     * @param amount The position amount of the trade\\n     * @param limitPrice The worst price the trader accepts\\n     * @param deadline The deadline of the trade\\n     * @param referrer The referrer's address of the trade\\n     * @param flags The flags of the trade\\n     * @return int256 The update position amount of the trader after the trade\\n     */\\n    function trade(\\n        uint256 perpetualIndex,\\n        address trader,\\n        int256 amount,\\n        int256 limitPrice,\\n        uint256 deadline,\\n        address referrer,\\n        uint32 flags\\n    ) external returns (int256);\\n\\n    /**\\n     * @notice Trade with AMM by the order, initiated by the broker.\\n     *         The trading price is determined by the AMM based on the index price of the perpetual.\\n     *         Trader must be initial margin safe if opening position and margin safe if closing position\\n     * @param orderData The order data object\\n     * @param amount The position amount of the trade\\n     * @return int256 The update position amount of the trader after the trade\\n     */\\n    function brokerTrade(bytes memory orderData, int256 amount) external returns (int256);\\n\\n    /**\\n     * @notice Get the number of active accounts in the perpetual.\\n     *         Active means the trader's account is not empty in the perpetual.\\n     *         Empty means cash and position are zero\\n     * @param perpetualIndex The index of the perpetual in the liquidity pool\\n     * @return activeAccountCount The number of active accounts in the perpetual\\n     */\\n    function getActiveAccountCount(uint256 perpetualIndex) external view returns (uint256);\\n\\n    /**\\n     * @notice Get the active accounts in the perpetual whose index between begin and end.\\n     *         Active means the trader's account is not empty in the perpetual.\\n     *         Empty means cash and position are zero\\n     * @param perpetualIndex The index of the perpetual in the liquidity pool\\n     * @param begin The begin index\\n     * @param end The end index\\n     * @return result The active accounts in the perpetual whose index between begin and end\\n     */\\n    function listActiveAccounts(\\n        uint256 perpetualIndex,\\n        uint256 begin,\\n        uint256 end\\n    ) external view returns (address[] memory result);\\n\\n    /**\\n     * @notice Get the progress of clearing active accounts.\\n     *         Return the number of total active accounts and the number of active accounts not cleared\\n     * @param perpetualIndex The index of the perpetual in the liquidity pool\\n     * @return left The left active accounts\\n     * @return total The total active accounts\\n     */\\n    function getClearProgress(uint256 perpetualIndex) external view returns (uint256 left, uint256 total);\\n\\n    /**\\n     * @notice Get the pool margin of the liquidity pool.\\n     *         Pool margin is how much collateral of the pool considering the AMM's positions of perpetuals\\n     * @return poolMargin The pool margin of the liquidity pool\\n     */\\n    function getPoolMargin() external view returns (int256 poolMargin, bool isSafe);\\n\\n    /**\\n     * @notice Get the update cash amount and the update position amount of trader\\n     *         if trader trades with AMM in the perpetual\\n     * @param perpetualIndex The index of the perpetual in the liquidity pool\\n     * @param amount The trading amount of position\\n     * @return deltaCash The update cash(collateral) of the trader after the trade\\n     * @return deltaPosition The update position of the trader after the trade\\n     */\\n    function queryTradeWithAMM(uint256 perpetualIndex, int256 amount)\\n        external\\n        view\\n        returns (int256 deltaCash, int256 deltaPosition);\\n\\n    /**\\n     * @notice  Query the price, fees and cost when trade agaist amm.\\n     *          The trading price is determined by the AMM based on the index price of the perpetual.\\n     *          This method should returns the same result as a 'read-only' trade.\\n     *          WARN: the result of this function is base on current storage of liquidityPool, not the latest.\\n     *          To get the latest status, call `syncState` first.\\n     *\\n     *          Flags is a 32 bit uint value which indicates: (from highest bit)\\n     *            - close only      only close position during trading;\\n     *            - market order    do not check limit price during trading;\\n     *            - stop loss       only available in brokerTrade mode;\\n     *            - take profit     only available in brokerTrade mode;\\n     *          For stop loss and take profit, see `validateTriggerPrice` in OrderModule.sol for details.\\n     *\\n     * @param   perpetualIndex  The index of the perpetual in liquidity pool.\\n     * @param   trader          The address of trader.\\n     * @param   amount          The amount of position to trader, positive for buying and negative for selling. The amount always use decimals 18.\\n     * @param   referrer        The address of referrer who will get rebate from the deal.\\n     * @param   flags           The flags of the trade.\\n     * @return  tradePrice      The average fill price.\\n     * @return  totalFee        The total fee collected from the trader after the trade.\\n     * @return  cost            Deposit or withdraw to let effective leverage == targetLeverage if flags contain USE_TARGET_LEVERAGE. > 0 if deposit, < 0 if withdraw.\\n     */\\n    function queryTrade(\\n        uint256 perpetualIndex,\\n        address trader,\\n        int256 amount,\\n        address referrer,\\n        uint32 flags\\n    )\\n        external\\n        view\\n        returns (\\n            int256 tradePrice,\\n            int256 totalFee,\\n            int256 cost\\n        );\\n\\n    /**\\n     * @notice Get claimable fee of the operator in the liquidity pool\\n     * @return int256 The claimable fee of the operator in the liquidity pool\\n     */\\n    function getClaimableOperatorFee() external view returns (int256);\\n\\n    /**\\n     * @notice Get claimable fee of the claimer in the liquidity pool\\n     * @param claimer The address of the claimer\\n     * @return int256 The claimable fee of the claimer in the liquidity pool. always use decimals 18.\\n     */\\n    function getClaimableFee(address claimer) external view returns (int256);\\n\\n    /**\\n     * @notice  If you want to get the real-time data, call this function first\\n     */\\n    function forceToSyncState() external;\\n\\n    /**\\n     * @notice Returns the current implementation of UpgradeableProxy.\\n     */\\n    function implementation() external view returns (address);\\n\\n    /**\\n     * @notice  Query cash to add / share to mint when adding liquidity to the liquidity pool.\\n     *          Only one of cashToAdd or shareToMint may be non-zero.\\n     *\\n     * @param   cashToAdd         The amount of cash to add, always use decimals 18.\\n     * @param   shareToMint       The amount of share token to mint, always use decimals 18.\\n     * @return  cashToAddResult   The amount of cash to add, always use decimals 18. Equal to cashToAdd if cashToAdd is non-zero.\\n     * @return  shareToMintResult The amount of cash to add, always use decimals 18. Equal to shareToMint if shareToMint is non-zero.\\n     */\\n    function queryAddLiquidity(int256 cashToAdd, int256 shareToMint)\\n        external\\n        view\\n        returns (int256 cashToAddResult, int256 shareToMintResult);\\n\\n    /**\\n     * @notice  Query cash to return / share to redeem when removing liquidity from the liquidity pool.\\n     *          Only one of shareToRemove or cashToReturn may be non-zero.\\n     *          Can only called when the pool is running.\\n     *\\n     * @param   shareToRemove       The amount of share token to redeem, always use decimals 18.\\n     * @param   cashToReturn        The amount of cash to return, always use decimals 18.\\n     * @return  shareToRemoveResult The amount of share token to redeem, always use decimals 18. Equal to shareToRemove if shareToRemove is non-zero.\\n     * @return  cashToReturnResult  The amount of cash to return, always use decimals 18. Equal to cashToReturn if cashToReturn is non-zero.\\n     */\\n    function queryRemoveLiquidity(int256 shareToRemove, int256 cashToReturn)\\n        external\\n        view\\n        returns (int256 shareToRemoveResult, int256 cashToReturnResult);\\n\\n    function settle(uint256 perpetualIndex, address trader) external;\\n\\n    /**\\n     * @dev     Get the fees of the trade. If the margin of the trader is not enough for fee:\\n     *            1. If trader open position, the trade will be reverted.\\n     *            2. If trader close position, the fee will be decreasing in proportion according to\\n     *               the margin left in the trader's account\\n     *          The rebate of referral will only calculate the lpFee and operatorFee.\\n     *          The vault fee will not be counted in.\\n     *\\n     * @param   liquidityPool   The reference of liquidity pool storage.\\n     * @param   perpetual       The reference of pereptual storage.\\n     * @param   trader          The address of trader.\\n     * @param   referrer        The address of referrer who will get rebate from the deal.\\n     * @param   tradeValue      The amount of trading value, measured by collateral, abs of deltaCash.\\n     * @return  lpFee           The amount of fee to the Liquidity provider.\\n     * @return  operatorFee     The amount of fee to the operator.\\n     * @return  vaultFee        The amount of fee to the vault.\\n     * @return  referralRebate  The amount of rebate of the refferral.\\n     */\\n    function getFees(\\n        address liquidityPool,\\n        address perpetual,\\n        address trader,\\n        address referrer,\\n        int256 tradeValue,\\n        bool hasOpened\\n    )\\n        external\\n        view\\n        returns (\\n            int256 lpFee,\\n            int256 operatorFee,\\n            int256 vaultFee,\\n            int256 referralRebate\\n        );\\n\\n    function setTargetLeverage(\\n        uint256 perpetualIndex,\\n        address trader,\\n        int256 targetLeverage\\n    ) external;\\n}\\n\",\"keccak256\":\"0x633683916049f1a6ef20fcb555de3e0f1045c10c7a871c3e2f88f8bc48676c03\",\"license\":\"MIT\"},\"contracts/libraries/Constant.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity =0.8.3;\\n\\nlibrary Constant {\\n    address internal constant INVALID_ADDRESS = address(0);\\n\\n    int256 internal constant SIGNED_ONE = 10**18;\\n    uint256 internal constant UNSIGNED_ONE = 10**18;\\n\\n    uint256 internal constant PRIVILEGE_DEPOSIT = 0x1;\\n    uint256 internal constant PRIVILEGE_WITHDRAW = 0x2;\\n    uint256 internal constant PRIVILEGE_TRADE = 0x4;\\n    uint256 internal constant PRIVILEGE_LIQUIDATE = 0x8;\\n    uint256 internal constant PRIVILEGE_GUARD =\\n        PRIVILEGE_DEPOSIT | PRIVILEGE_WITHDRAW | PRIVILEGE_TRADE | PRIVILEGE_LIQUIDATE;\\n    // max number of uint256\\n    uint256 internal constant SET_ALL_PERPETUALS_TO_EMERGENCY_STATE =\\n        0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff;\\n}\\n\",\"keccak256\":\"0x55da403119d4310afd8a445d0a495be73727410500e5ddf99f352966d6f45e04\",\"license\":\"BUSL-1.1\"},\"contracts/libraries/SafeMathExt.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity =0.8.3;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/math/SignedSafeMathUpgradeable.sol\\\";\\n\\nimport \\\"./Constant.sol\\\";\\nimport \\\"./Utils.sol\\\";\\n\\nenum Round {\\n    CEIL,\\n    FLOOR\\n}\\n\\nlibrary SafeMathExt {\\n    using SafeMathUpgradeable for uint256;\\n    using SignedSafeMathUpgradeable for int256;\\n\\n    /*\\n     * @dev Always half up for uint256\\n     */\\n    function wmul(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        z = x.mul(y).add(Constant.UNSIGNED_ONE / 2) / Constant.UNSIGNED_ONE;\\n    }\\n\\n    /*\\n     * @dev Always half up for uint256\\n     */\\n    function wdiv(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        z = x.mul(Constant.UNSIGNED_ONE).add(y / 2).div(y);\\n    }\\n\\n    /*\\n     * @dev Always half up for uint256\\n     */\\n    function wfrac(\\n        uint256 x,\\n        uint256 y,\\n        uint256 z\\n    ) internal pure returns (uint256 r) {\\n        r = x.mul(y).add(z / 2).div(z);\\n    }\\n\\n    /*\\n     * @dev Always half up if no rounding parameter\\n     */\\n    function wmul(int256 x, int256 y) internal pure returns (int256 z) {\\n        z = roundHalfUp(x.mul(y), Constant.SIGNED_ONE) / Constant.SIGNED_ONE;\\n    }\\n\\n    /*\\n     * @dev Always half up if no rounding parameter\\n     */\\n    function wdiv(int256 x, int256 y) internal pure returns (int256 z) {\\n        if (y < 0) {\\n            y = neg(y);\\n            x = neg(x);\\n        }\\n        z = roundHalfUp(x.mul(Constant.SIGNED_ONE), y).div(y);\\n    }\\n\\n    /*\\n     * @dev Always half up if no rounding parameter\\n     */\\n    function wfrac(\\n        int256 x,\\n        int256 y,\\n        int256 z\\n    ) internal pure returns (int256 r) {\\n        int256 t = x.mul(y);\\n        if (z < 0) {\\n            z = neg(z);\\n            t = neg(t);\\n        }\\n        r = roundHalfUp(t, z).div(z);\\n    }\\n\\n    function wmul(\\n        int256 x,\\n        int256 y,\\n        Round round\\n    ) internal pure returns (int256 z) {\\n        z = div(x.mul(y), Constant.SIGNED_ONE, round);\\n    }\\n\\n    function wdiv(\\n        int256 x,\\n        int256 y,\\n        Round round\\n    ) internal pure returns (int256 z) {\\n        z = div(x.mul(Constant.SIGNED_ONE), y, round);\\n    }\\n\\n    function wfrac(\\n        int256 x,\\n        int256 y,\\n        int256 z,\\n        Round round\\n    ) internal pure returns (int256 r) {\\n        int256 t = x.mul(y);\\n        r = div(t, z, round);\\n    }\\n\\n    function abs(int256 x) internal pure returns (int256) {\\n        return x >= 0 ? x : neg(x);\\n    }\\n\\n    function neg(int256 a) internal pure returns (int256) {\\n        return SignedSafeMathUpgradeable.sub(int256(0), a);\\n    }\\n\\n    /*\\n     * @dev ROUND_HALF_UP rule helper.\\n     *      You have to call roundHalfUp(x, y) / y to finish the rounding operation.\\n     *      0.5 \\u2248 1, 0.4 \\u2248 0, -0.5 \\u2248 -1, -0.4 \\u2248 0\\n     */\\n    function roundHalfUp(int256 x, int256 y) internal pure returns (int256) {\\n        require(y > 0, \\\"roundHalfUp only supports y > 0\\\");\\n        if (x >= 0) {\\n            return x.add(y / 2);\\n        }\\n        return x.sub(y / 2);\\n    }\\n\\n    /*\\n     * @dev Division, rounding ceil or rounding floor\\n     */\\n    function div(\\n        int256 x,\\n        int256 y,\\n        Round round\\n    ) internal pure returns (int256 divResult) {\\n        require(y != 0, \\\"division by zero\\\");\\n        divResult = x.div(y);\\n        if (x % y == 0) {\\n            return divResult;\\n        }\\n        bool isSameSign = Utils.hasTheSameSign(x, y);\\n        if (round == Round.CEIL && isSameSign) {\\n            divResult = divResult.add(1);\\n        }\\n        if (round == Round.FLOOR && !isSameSign) {\\n            divResult = divResult.sub(1);\\n        }\\n    }\\n\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n}\\n\",\"keccak256\":\"0x93d01370419b45ed6a093c396141eb3ae03c46477f5a03fbf10c4c21c8e6c810\",\"license\":\"BUSL-1.1\"},\"contracts/libraries/Utils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.3;\\nimport \\\"./SafeMathExt.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/math/SignedSafeMathUpgradeable.sol\\\";\\n\\n//recreating https://github.com/mcdexio/mai-protocol-v3/blob/master/contracts/libraries/Utils.sol\\nlibrary Utils {\\n    using SafeMathExt for int256;\\n    using SignedSafeMathUpgradeable for int256;\\n\\n    /*\\n     * @dev Check if two numbers have the same sign. Zero has the same sign with any number\\n     */\\n    function hasTheSameSign(int256 x, int256 y) internal pure returns (bool) {\\n        if (x == 0 || y == 0) {\\n            return true;\\n        }\\n        return (x ^ y) >> 255 == 0;\\n    }\\n\\n    /*\\n     * @dev Split the delta to two numbers.\\n     *      Use for splitting the trading amount to the amount to close position and the amount to open position.\\n     *      Examples: 2, 1 => 0, 1; 2, -1 => -1, 0; 2, -3 => -2, -1\\n     */\\n    function splitAmount(int256 amount, int256 delta) internal pure returns (int256, int256) {\\n        if (Utils.hasTheSameSign(amount, delta)) {\\n            return (0, delta);\\n        } else if (amount.abs() >= delta.abs()) {\\n            return (delta, 0);\\n        } else {\\n            return (amount.neg(), amount.add(delta));\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xbc9bcf713d44c752ccbadf9b42886cf1f8ca47d2e427c02e81888b98fbf0dae2\",\"license\":\"MIT\"},\"contracts/tests/MCDEXAdresses.sol\":{\"content\":\"contract MCDEXAdresses {\\n    address public constant liquidityPool = 0xC676b2f6674A1650bAf5948BC1DD9326f2743a4D; //this needs to be changed dynamically (for now run copy the address manually after running mai-protocol-v3/scripts/deploy.ts and copy from console)\\n}\\n\",\"keccak256\":\"0x870abed9ecabae218a471f18ea057ecb5484142f540cda19c855248751b2e48c\"},\"contracts/tests/USDLemma_Test.sol\":{\"content\":\"// Adds Test library to the context\\nimport { Test, Display } from \\\"@giry/hardhat-test-solidity/test.sol\\\";\\nimport { USDLemma, IERC20Upgradeable, SafeMathExt, SafeCastUpgradeable } from \\\"../USDLemma.sol\\\";\\nimport { MCDEXLemma, ILiquidityPool } from \\\"../wrappers/MCDEXLemma.sol\\\";\\nimport { MCDEXAdresses } from \\\"./MCDEXAdresses.sol\\\";\\nimport { AddressUpgradeable } from \\\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\\\";\\nimport \\\"hardhat/console.sol\\\";\\n\\ncontract USDLemma_Test {\\n    using SafeCastUpgradeable for int256;\\n    using SafeMathExt for int256;\\n    using SafeMathExt for uint256;\\n\\n    USDLemma usdLemma;\\n    MCDEXLemma mcdexLemma;\\n    MCDEXAdresses mcdexAdresses = new MCDEXAdresses();\\n    ILiquidityPool liquidityPool;\\n    address constant trustedForwarder = address(0);\\n    uint256 constant perpetualIndex = 0;\\n    uint256 constant perpetualDEXIndex = 0;\\n    IERC20Upgradeable collateral;\\n\\n    function _beforeAll() public {\\n        usdLemma = new USDLemma();\\n        mcdexLemma = new MCDEXLemma();\\n    }\\n\\n    function deposit_test() public {\\n        prepare();\\n        uint256 collateralBalanceBefore = collateral.balanceOf(address(this));\\n        uint256 amount = 100 ether;\\n        uint256 collateralAmountRequired = deposit(amount);\\n        int256 leverage = calculateLeverge();\\n        Test.eq(usdLemma.balanceOf(address(this)), amount, \\\"not minted correctly\\\");\\n        Test.eq(\\n            collateralBalanceBefore - collateral.balanceOf(address(this)),\\n            collateralAmountRequired,\\n            \\\"collateral transferred incorrectly\\\"\\n        );\\n        Test.eq(leverage.toUint256(), 1 ether, \\\"leverge !=1\\\");\\n    }\\n\\n    // function withdraw_test() public {\\n    //     prepare();\\n    //     uint256 amount = 10 ether;\\n    //     deposit(amount);\\n    //     uint256 collateralBalanceBefore = collateral.balanceOf(address(this));\\n    //     uint256 collateralAmountToGetBack = withdraw(amount);\\n\\n    //     Test.eq(usdLemma.balanceOf(address(this)), uint256(0), \\\"not minted correctly\\\");\\n    //     Test.eq(\\n    //         collateral.balanceOf(address(this)) - collateralBalanceBefore,\\n    //         collateralAmountToGetBack,\\n    //         \\\"collateral transferred incorrectly\\\"\\n    //     );\\n    // }\\n\\n    function deposit(uint256 amount) public returns (uint256 collateralAmountRequiredInDecimals) {\\n        uint256 collateralAmountRequired = mcdexLemma.getCollateralAmountGivenUnderlyingAssetAmount(amount, true);\\n        collateralAmountRequiredInDecimals = mcdexLemma.getAmountInCollateralDecimals(collateralAmountRequired, true);\\n        collateral.approve(address(usdLemma), collateralAmountRequiredInDecimals);\\n        usdLemma.deposit(amount, perpetualDEXIndex, collateralAmountRequiredInDecimals, collateral);\\n    }\\n\\n    function withdraw(uint256 amount) public returns (uint256 collateralAmountRequiredInDecimals) {\\n        uint256 collateralAmountRequired = mcdexLemma.getCollateralAmountGivenUnderlyingAssetAmount(amount, false);\\n        collateralAmountRequiredInDecimals = mcdexLemma.getAmountInCollateralDecimals(collateralAmountRequired, false);\\n        usdLemma.withdraw(amount, perpetualDEXIndex, collateralAmountRequiredInDecimals, collateral);\\n    }\\n\\n    function calculateLeverge() internal returns (int256 leverage) {\\n        int256 markPrice;\\n        int256 keeperGasReward;\\n        int256 unitAccumulativeFunding;\\n        int256 initialMarginRate;\\n        {\\n            (, , int256[39] memory nums) = liquidityPool.getPerpetualInfo(perpetualIndex);\\n            markPrice = nums[1];\\n            keeperGasReward = nums[11];\\n            unitAccumulativeFunding = nums[4];\\n            initialMarginRate = nums[5];\\n        }\\n        {\\n            int256 reservedCash = keeperGasReward;\\n            logInt(\\\"reservedCash\\\", reservedCash);\\n            (\\n                int256 cash,\\n                int256 position,\\n                int256 availableMarginFromMCDEX,\\n                int256 marginBalanceFromMCDEX,\\n                ,\\n                ,\\n                ,\\n                ,\\n\\n            ) = liquidityPool.getMarginAccount(perpetualIndex, address(mcdexLemma));\\n            // logInt(\\\"position\\\", position);\\n            // logInt(\\\"cash\\\", cash);\\n            int256 positionValue = markPrice.wmul(position.abs());\\n            logInt(\\\"positionValue\\\", positionValue);\\n            int256 positionMargin = positionValue.wmul(initialMarginRate);\\n\\n            int256 availableCashBalance = cash - (position.wmul(unitAccumulativeFunding));\\n            //marginBalanceFromMCDEX(margin) ==  marginBalance\\n            int256 marginBalance = availableCashBalance + (markPrice.wmul(position));\\n            logInt(\\\"marginBalanceFromMCDEX\\\", marginBalanceFromMCDEX);\\n            logInt(\\\"marginBalance\\\", marginBalance);\\n            int256 availableMargin = marginBalance - positionMargin - reservedCash;\\n            // logInt(\\\"availableMarginFromMCDEX\\\", availableMarginFromMCDEX);\\n            // logInt(\\\"availableMargin\\\", availableMargin);\\n\\n            int256 marginWithoutReserved = marginBalance - reservedCash;\\n\\n            leverage = positionValue.wdiv(marginWithoutReserved);\\n        }\\n\\n        console.log(\\\"leverage\\\", leverage.toUint256());\\n        // revert(\\\"yuhi\\\");\\n    }\\n\\n    function logInt(string memory name, int256 num) internal {\\n        if (num >= 0) {\\n            console.log(name, \\\":  \\\", num.toUint256());\\n        } else {\\n            console.log(name, \\\": -\\\", num.abs().toUint256());\\n        }\\n    }\\n\\n    function prepare() public {\\n        address reBalancer = address(0);\\n        uint256 maxPosition = type(uint256).max - 1;\\n\\n        liquidityPool = ILiquidityPool(mcdexAdresses.liquidityPool());\\n        // Test.eq(AddressUpgradeable.isContract(address(liquidityPool)), true, \\\"see contracts/tests/MCDEXAdresses.sol\\\");\\n        // console.log(\\\"isContract\\\", AddressUpgradeable.isContract(address(liquidityPool)));\\n\\n        mcdexLemma.initialize(\\n            trustedForwarder,\\n            liquidityPool,\\n            perpetualIndex,\\n            address(usdLemma),\\n            reBalancer,\\n            maxPosition\\n        );\\n        collateral = mcdexLemma.collateral();\\n        usdLemma.initialize(trustedForwarder, address(collateral), address(mcdexLemma));\\n\\n        //send some eth to WETH (collateral address)\\n        address(collateral).call{ value: 100 ether }(\\\"\\\");\\n\\n        //add liquidity\\n        int256 liquidityToAdd = 10 ether;\\n        collateral.approve(address(liquidityPool), liquidityToAdd.toUint256());\\n        address(liquidityPool).call(abi.encodeWithSignature(\\\"addLiquidity(int256)\\\", liquidityToAdd));\\n\\n        int256 keeperGasReward;\\n        {\\n            (, , int256[39] memory nums) = liquidityPool.getPerpetualInfo(perpetualIndex);\\n            keeperGasReward = nums[11];\\n        }\\n\\n        collateral.approve(\\n            address(mcdexLemma),\\n            mcdexLemma.getAmountInCollateralDecimals(keeperGasReward.toUint256(), true)\\n        );\\n        mcdexLemma.depositKeeperGasReward();\\n    }\\n\\n    receive() external payable {}\\n}\\n\",\"keccak256\":\"0x2d58da07145e87daabb0cf2bfbd9e84298c980918b3711cc824259477184b81e\"},\"contracts/wrappers/MCDEXLemma.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.3;\\n\\nimport { ILiquidityPool, PerpetualState } from \\\"../interfaces/MCDEX/ILiquidityPool.sol\\\";\\nimport { SafeCastUpgradeable } from \\\"@openzeppelin/contracts-upgradeable/utils/math/SafeCastUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport { ERC2771ContextUpgradeable } from \\\"@openzeppelin/contracts-upgradeable/metatx/ERC2771ContextUpgradeable.sol\\\";\\nimport { IERC20Upgradeable } from \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport { Utils } from \\\"../libraries/Utils.sol\\\";\\nimport { SafeMathExt } from \\\"../libraries/SafeMathExt.sol\\\";\\n\\ninterface IUSDLemma {\\n    function lemmaTreasury() external view returns (address);\\n}\\n\\n/// @author Lemma Finance\\ncontract MCDEXLemma is OwnableUpgradeable, ERC2771ContextUpgradeable {\\n    using SafeCastUpgradeable for uint256;\\n    using SafeCastUpgradeable for int256;\\n    using Utils for int256;\\n    using SafeMathExt for int256;\\n\\n    uint256 public constant MAX_UINT256 = type(uint256).max;\\n    int256 public constant MAX_INT256 = type(int256).max;\\n\\n    // address of Mai3 liquidity pool\\n    ILiquidityPool public liquidityPool;\\n\\n    // pereptual index in the liquidity pool\\n    uint256 public perpetualIndex;\\n\\n    IERC20Upgradeable public collateral;\\n    uint256 public collateralDecimals;\\n\\n    address public usdLemma;\\n    address public reBalancer;\\n    address public referrer;\\n\\n    int256 public entryFunding;\\n    int256 public realizedFundingPNL;\\n    int256 public fundingPNLAtLastReBalance;\\n\\n    uint256 public positionAtSettlement;\\n\\n    uint256 public maxPosition;\\n\\n    function initialize(\\n        address _trustedForwarder,\\n        ILiquidityPool _liquidityPool,\\n        uint256 _perpetualIndex,\\n        address _usdlemma,\\n        address _reBalancer,\\n        uint256 _maxPosition\\n    ) external initializer {\\n        __Ownable_init();\\n        __ERC2771Context_init(_trustedForwarder);\\n        liquidityPool = _liquidityPool;\\n        perpetualIndex = _perpetualIndex;\\n        {\\n            (bool isRunning, , address[7] memory addresses, , uint256[4] memory uintNums) = liquidityPool\\n                .getLiquidityPoolInfo();\\n            require(isRunning, \\\"pool is not running\\\");\\n            collateral = IERC20Upgradeable(addresses[5]);\\n            collateralDecimals = uintNums[0];\\n        }\\n        setReBalancer(_reBalancer);\\n        setUSDLemma(_usdlemma);\\n        setMaxPosition(_maxPosition);\\n\\n        //approve collateral to\\n        collateral.approve(address(liquidityPool), MAX_UINT256);\\n        //target leverage = 1\\n        liquidityPool.setTargetLeverage(perpetualIndex, address(this), 1 ether); //1\\n    }\\n\\n    ///@notice sets USDLemma address - only owner can set\\n    ///@param _usdlemma USDLemma address to set\\n    function setUSDLemma(address _usdlemma) public onlyOwner {\\n        usdLemma = _usdlemma;\\n    }\\n\\n    ///@notice sets refferer address - only owner can set\\n    ///@param _referrer refferer address to set\\n    function setReferrer(address _referrer) public onlyOwner {\\n        referrer = _referrer;\\n    }\\n\\n    ///@notice sets reBalncer address - only owner can set\\n    ///@param _reBalancer reBalancer address to set\\n    function setReBalancer(address _reBalancer) public onlyOwner {\\n        reBalancer = _reBalancer;\\n    }\\n\\n    ///@notice sets Max Positions - only owner can set\\n    ///@param _maxPosition reBalancer address to set\\n    function setMaxPosition(uint256 _maxPosition) public onlyOwner {\\n        maxPosition = _maxPosition;\\n    }\\n\\n    //this needs to be done before the first withdrawal happens\\n    //Keeper gas reward needs to be handled seperately which owner can get back when perpetual has settled\\n    /// @notice Deposit Keeper gas reward for the perpetual - only owner can call\\n    function depositKeeperGasReward() external onlyOwner {\\n        int256 keeperGasReward;\\n        {\\n            (, , int256[39] memory nums) = liquidityPool.getPerpetualInfo(perpetualIndex);\\n            keeperGasReward = nums[11];\\n        }\\n        collateral.transferFrom(\\n            _msgSender(),\\n            address(this),\\n            getAmountInCollateralDecimals(keeperGasReward.toUint256(), true)\\n        );\\n        liquidityPool.deposit(perpetualIndex, address(this), keeperGasReward);\\n    }\\n\\n    //go short to open\\n    /// @notice Open short position on dex and deposit collateral\\n    /// @param amount worth in USD short position which is to be opened\\n    function open(uint256 amount) external {\\n        require(_msgSender() == usdLemma, \\\"only usdLemma is allowed\\\");\\n        uint256 collateralRequiredAmount = getCollateralAmountGivenUnderlyingAssetAmount(amount, true);\\n        require(\\n            collateral.balanceOf(address(this)) >= getAmountInCollateralDecimals(collateralRequiredAmount, true),\\n            \\\"not enough collateral\\\"\\n        );\\n        liquidityPool.deposit(perpetualIndex, address(this), collateralRequiredAmount.toInt256());\\n\\n        (, int256 position, , , , , , , ) = liquidityPool.getMarginAccount(perpetualIndex, address(this));\\n\\n        require(position.abs().toUint256() + amount <= maxPosition, \\\"max position reached\\\");\\n        liquidityPool.trade(perpetualIndex, address(this), amount.toInt256(), MAX_INT256, MAX_UINT256, referrer, 0);\\n        updateEntryFunding(position, amount.toInt256());\\n    }\\n\\n    //go long and withdraw collateral\\n    /// @notice Close short position on dex and withdraw collateral\\n    /// @param amount worth in USD short position which is to be closed\\n    function close(uint256 amount) external {\\n        require(_msgSender() == usdLemma, \\\"only usdLemma is allowed\\\");\\n\\n        uint256 collateralAmountRequired = getCollateralAmountGivenUnderlyingAssetAmount(amount, false);\\n\\n        (PerpetualState perpetualState, , ) = liquidityPool.getPerpetualInfo(perpetualIndex);\\n\\n        if (perpetualState != PerpetualState.CLEARED) {\\n            //means perpetual settled\\n            (, int256 position, , , , , , , ) = liquidityPool.getMarginAccount(perpetualIndex, address(this));\\n            liquidityPool.trade(\\n                perpetualIndex,\\n                address(this),\\n                -amount.toInt256(), //negative means you want to go short (on USD, that in turn means long on ETH)\\n                0,\\n                MAX_UINT256,\\n                referrer,\\n                0\\n            );\\n            liquidityPool.withdraw(perpetualIndex, address(this), collateralAmountRequired.toInt256());\\n            updateEntryFunding(position, -amount.toInt256());\\n        }\\n        collateral.transfer(usdLemma, getAmountInCollateralDecimals(collateralAmountRequired, false));\\n    }\\n\\n    //// @notice when perpetual is in CLEARED state, withdraw the collateral\\n    function settle() public {\\n        (, int256 position, , , , , , , ) = liquidityPool.getMarginAccount(perpetualIndex, address(this));\\n        positionAtSettlement = position.abs().toUint256();\\n        liquidityPool.settle(perpetualIndex, address(this));\\n    }\\n\\n    /// @notice Collateral amount required for amount in USD to open or close position on dex\\n    /// @param amount worth in USD short position which is to be closed or opened\\n    /// @param isShorting true if opening short position, false if closing short position\\n    /// @return collateralAmountRequired equivalent collateral amount\\n    function getCollateralAmountGivenUnderlyingAssetAmount(uint256 amount, bool isShorting)\\n        public\\n        returns (uint256 collateralAmountRequired)\\n    {\\n        liquidityPool.forceToSyncState();\\n        int256 tradeAmount = isShorting ? amount.toInt256() : -amount.toInt256();\\n\\n        //handle the case when perpetual has settled\\n        (PerpetualState perpetualState, , ) = liquidityPool.getPerpetualInfo(perpetualIndex);\\n\\n        if (perpetualState == PerpetualState.CLEARED) {\\n            require(isShorting == false, \\\"cannot open when perpetual has settled\\\");\\n            (\\n                ,\\n                ,\\n                ,\\n                ,\\n                int256 settleableMargin, // bankrupt\\n                ,\\n                ,\\n                ,\\n\\n            ) = liquidityPool.getMarginAccount(perpetualIndex, address(this));\\n\\n            if (settleableMargin != 0) {\\n                settle();\\n            }\\n            collateralAmountRequired = (collateral.balanceOf(address(this)) * amount) / positionAtSettlement;\\n        } else {\\n            (int256 tradePrice, int256 totalFee, ) = liquidityPool.queryTrade(\\n                perpetualIndex,\\n                address(this),\\n                tradeAmount,\\n                referrer,\\n                0\\n            );\\n\\n            int256 deltaCash = amount.toInt256().wmul(tradePrice);\\n\\n            collateralAmountRequired = isShorting\\n                ? (deltaCash + totalFee).toUint256()\\n                : (deltaCash - totalFee).toUint256();\\n        }\\n    }\\n\\n    /// @notice Rebalance position of dex based on accumulated funding, since last rebalancing\\n    /// @param _reBalancer Address of rebalancer who called function on USDL contract\\n    /// @param amount Amount of accumulated funding fees used to rebalance by opening or closing a short position\\n    /// @param data Abi encoded data to call respective mcdex function, contains limitPrice and deadline\\n    /// @return True if successful, False if unsuccessful\\n    function reBalance(\\n        address _reBalancer,\\n        int256 amount,\\n        bytes calldata data\\n    ) external returns (bool) {\\n        liquidityPool.forceToSyncState();\\n        require(_msgSender() == usdLemma, \\\"only usdLemma is allowed\\\");\\n        require(_reBalancer == reBalancer, \\\"only rebalancer is allowed\\\");\\n\\n        (int256 limitPrice, uint256 deadline) = abi.decode(data, (int256, uint256));\\n        int256 fundingPNL = getFundingPNL();\\n\\n        (int256 tradePrice, int256 totalFee, ) = liquidityPool.queryTrade(\\n            perpetualIndex,\\n            address(this),\\n            amount,\\n            referrer,\\n            0\\n        );\\n        int256 deltaCash = amount.abs().wmul(tradePrice);\\n        uint256 collateralAmount = (deltaCash + totalFee).toUint256();\\n        if (amount < 0) {\\n            realizedFundingPNL -= collateralAmount.toInt256();\\n        } else {\\n            realizedFundingPNL += collateralAmount.toInt256();\\n        }\\n\\n        int256 difference = fundingPNL - realizedFundingPNL;\\n        //error +-10**12 is allowed in calculation\\n        require(difference.abs() <= 10**12, \\\"not allowed\\\");\\n\\n        liquidityPool.trade(perpetualIndex, address(this), amount, limitPrice, deadline, referrer, 0);\\n\\n        return true;\\n    }\\n\\n    /// @notice calculate entryFunding to be able to calculate the fundingPNL easily\\n    /// @param position Current position on MCDEX\\n    /// @param tradeAmount Change in current position on MCDEX\\n    function updateEntryFunding(int256 position, int256 tradeAmount) internal {\\n        (int256 closeAmount, int256 openAmount) = Utils.splitAmount(position, tradeAmount);\\n        int256 unitAccumulativeFunding;\\n        {\\n            (, , int256[39] memory nums) = liquidityPool.getPerpetualInfo(perpetualIndex);\\n            unitAccumulativeFunding = nums[4];\\n        }\\n        if (closeAmount != 0) {\\n            int256 oldPosition = position;\\n            int256 newPosition = position + closeAmount;\\n            entryFunding = entryFunding.wmul(newPosition).wdiv(oldPosition);\\n        }\\n        if (openAmount != 0) {\\n            entryFunding = entryFunding + unitAccumulativeFunding.wmul(openAmount);\\n        }\\n    }\\n\\n    /// @notice Get funding PnL for this address till now\\n    /// @return fundingPNL Funding PnL accumulated till now\\n    function getFundingPNL() public view returns (int256 fundingPNL) {\\n        int256 unitAccumulativeFunding;\\n        {\\n            (, , int256[39] memory nums) = liquidityPool.getPerpetualInfo(perpetualIndex);\\n            unitAccumulativeFunding = nums[4];\\n        }\\n        (, int256 position, , , , , , , ) = liquidityPool.getMarginAccount(perpetualIndex, address(this));\\n        fundingPNL = entryFunding - position.wmul(unitAccumulativeFunding);\\n    }\\n\\n    /// @notice Get Amount in collateral decimals, provided amount is in 18 decimals\\n    /// @param amount Amount in 18 decimals\\n    /// @param roundUp If needs to round up\\n    /// @return decimal adjusted value\\n    function getAmountInCollateralDecimals(uint256 amount, bool roundUp) public view returns (uint256) {\\n        if (roundUp && (amount % (uint256(10**(18 - collateralDecimals))) != 0)) {\\n            return amount / uint256(10**(18 - collateralDecimals)) + 1;\\n        }\\n\\n        return amount / uint256(10**(18 - collateralDecimals));\\n    }\\n\\n    ///@notice send MCB tokens that we may get to lemmaTreasury\\n    function sendMCBToTreasury() external {\\n        IERC20Upgradeable mcbToken = IERC20Upgradeable(0x4e352cF164E64ADCBad318C3a1e222E9EBa4Ce42);\\n        address lemmaTreasury = IUSDLemma(usdLemma).lemmaTreasury();\\n        mcbToken.transfer(lemmaTreasury, mcbToken.balanceOf(address(this)));\\n    }\\n\\n    function _msgSender()\\n        internal\\n        view\\n        virtual\\n        override(ContextUpgradeable, ERC2771ContextUpgradeable)\\n        returns (address sender)\\n    {\\n        //ERC2771ContextUpgradeable._msgSender();\\n        return super._msgSender();\\n    }\\n\\n    function _msgData()\\n        internal\\n        view\\n        virtual\\n        override(ContextUpgradeable, ERC2771ContextUpgradeable)\\n        returns (bytes calldata)\\n    {\\n        //ERC2771ContextUpgradeable._msgData();\\n        return super._msgData();\\n    }\\n}\\n\",\"keccak256\":\"0xf8d5077bd99bf0c842d87c356f82a4f2369c78c2ae33130df2f085a2141fa097\",\"license\":\"MIT\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >= 0.4.22 <0.9.0;\\n\\nlibrary console {\\n\\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\\n\\n\\tfunction _sendLogPayload(bytes memory payload) private view {\\n\\t\\tuint256 payloadLength = payload.length;\\n\\t\\taddress consoleAddress = CONSOLE_ADDRESS;\\n\\t\\tassembly {\\n\\t\\t\\tlet payloadStart := add(payload, 32)\\n\\t\\t\\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\\n\\t\\t}\\n\\t}\\n\\n\\tfunction log() internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n\\t}\\n\\n\\tfunction logInt(int p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(int)\\\", p0));\\n\\t}\\n\\n\\tfunction logUint(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction logString(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction logBool(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction logAddress(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes(bytes memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes1(bytes1 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes2(bytes2 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes3(bytes3 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes4(bytes4 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes5(bytes5 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes6(bytes6 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes7(bytes7 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes8(bytes8 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes9(bytes9 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes10(bytes10 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes11(bytes11 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes12(bytes12 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes13(bytes13 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes14(bytes14 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes15(bytes15 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes16(bytes16 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes17(bytes17 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes18(bytes18 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes19(bytes19 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes20(bytes20 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes21(bytes21 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes22(bytes22 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes23(bytes23 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes24(bytes24 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes25(bytes25 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes26(bytes26 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes27(bytes27 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes28(bytes28 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes29(bytes29 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes30(bytes30 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes31(bytes31 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes32(bytes32 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction log(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction log(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction log(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n}\\n\",\"keccak256\":\"0x72b6a1d297cd3b033d7c2e4a7e7864934bb767db6453623f1c3082c6534547f4\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040526040516100109061005f565b604051809103906000f08015801561002c573d6000803e3d6000fd5b50600280546001600160a01b0319166001600160a01b039290921691909117905534801561005957600080fd5b5061006c565b60b7806200702383390190565b616fa7806200007c6000396000f3fe60806040526004361061004e5760003560e01c80632e1a7d4d1461005a57806399d644d51461008c578063b6b55f25146100a3578063d28cebb8146100c3578063fe8b4027146100d857610055565b3661005557005b600080fd5b34801561006657600080fd5b5061007a6100753660046114e6565b6100ed565b60405190815260200160405180910390f35b34801561009857600080fd5b506100a161027c565b005b3480156100af57600080fd5b5061007a6100be3660046114e6565b6104cf565b3480156100cf57600080fd5b506100a16106bd565b3480156100e457600080fd5b506100a1610cb5565b6001546040516392f72def60e01b8152600481018390526000602482018190529182916001600160a01b03909116906392f72def90604401602060405180830381600087803b15801561013f57600080fd5b505af1158015610153573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061017791906114fe565b600154604051639a91999160e01b815260048101839052600060248201529192506001600160a01b031690639a9199919060440160206040518083038186803b1580156101c357600080fd5b505afa1580156101d7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101fb91906114fe565b600080546004805460405163d331bef760e01b81529182018890526024820193909352604481018490526001600160a01b039283166064820152929450169063d331bef7906084015b600060405180830381600087803b15801561025e57600080fd5b505af1158015610272573d6000803e3d6000fd5b5050505050919050565b6102846106bd565b600480546040516370a0823160e01b815230928101929092526000916001600160a01b03909116906370a082319060240160206040518083038186803b1580156102cd57600080fd5b505afa1580156102e1573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061030591906114fe565b905068056bc75e2d63100000600061031c826104cf565b90506000610328610d49565b6000546040516370a0823160e01b81523060048201529192506103dd916001600160a01b03909116906370a082319060240160206040518083038186803b15801561037257600080fd5b505afa158015610386573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103aa91906114fe565b84604051806040016040528060148152602001736e6f74206d696e74656420636f72726563746c7960601b815250611029565b50600480546040516370a0823160e01b81523092810192909252610489916001600160a01b03909116906370a082319060240160206040518083038186803b15801561042857600080fd5b505afa15801561043c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061046091906114fe565b61046a9086611724565b83604051806060016040528060228152602001616f5060229139611029565b506104c861049682611076565b670de0b6b3a76400006040518060400160405280600b81526020016a6c65766572676520213d3160a81b815250611029565b5050505050565b600180546040516392f72def60e01b815260048101849052602481019290925260009182916001600160a01b0316906392f72def90604401602060405180830381600087803b15801561052157600080fd5b505af1158015610535573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061055991906114fe565b60018054604051639a91999160e01b81526004810184905260248101929092529192506001600160a01b0390911690639a9199919060440160206040518083038186803b1580156105a957600080fd5b505afa1580156105bd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105e191906114fe565b6004805460005460405163095ea7b360e01b81526001600160a01b039182169381019390935260248301849052929450919091169063095ea7b390604401602060405180830381600087803b15801561063957600080fd5b505af115801561064d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610671919061139a565b50600080546004805460405163fad3cc4b60e01b81529182018790526024820193909352604481018590526001600160a01b03928316606482015291169063fad3cc4b90608401610244565b6000806106cd6001600019611724565b9050600260009054906101000a90046001600160a01b03166001600160a01b031663665a11ca6040518163ffffffff1660e01b815260040160206040518083038186803b15801561071d57600080fd5b505afa158015610731573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610755919061137e565b600380546001600160a01b0319166001600160a01b039283169081179091556001546000805460405163d1870db960e01b8152600481018390526024810194909452604484019190915283166064830152848316608483015260a482018490529091169063d1870db99060c401600060405180830381600087803b1580156107dc57600080fd5b505af11580156107f0573d6000803e3d6000fd5b50505050600160009054906101000a90046001600160a01b03166001600160a01b031663d8dfeb456040518163ffffffff1660e01b815260040160206040518083038186803b15801561084257600080fd5b505afa158015610856573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061087a919061137e565b600480546001600160a01b0319166001600160a01b0392831690811782556000805460015460405163c0c53b8b60e01b8152948501929092526024840192909252831660448301529091169063c0c53b8b90606401600060405180830381600087803b1580156108e957600080fd5b505af11580156108fd573d6000803e3d6000fd5b50506004546040516001600160a01b03909116925068056bc75e2d631000009150600081818185875af1925050503d8060008114610957576040519150601f19603f3d011682016040523d82523d6000602084013e61095c565b606091505b5050600454600354678ac7230489e8000092506001600160a01b039182169163095ea7b3911661098b84611076565b6040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401602060405180830381600087803b1580156109d157600080fd5b505af11580156109e5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a09919061139a565b50600354604051602481018390526001600160a01b039091169060440160408051601f198184030181529181526020820180516001600160e01b0316635cfb7f8f60e01b17905251610a5b9190611542565b6000604051808303816000865af19150503d8060008114610a98576040519150601f19603f3d011682016040523d82523d6000602084013e610a9d565b606091505b50506003546040516204966760e11b8152600060048201819052925082916001600160a01b03169062092cce906024016105206040518083038186803b158015610ae657600080fd5b505afa158015610afa573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b1e91906113b4565b61016001516004546001549195506001600160a01b03908116945063095ea7b3935016905080639a919991610b5286611076565b6040516001600160e01b031960e084901b16815260048101919091526001602482015260440160206040518083038186803b158015610b9057600080fd5b505afa158015610ba4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bc891906114fe565b6040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401602060405180830381600087803b158015610c0e57600080fd5b505af1158015610c22573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c46919061139a565b50600160009054906101000a90046001600160a01b03166001600160a01b031663a29558346040518163ffffffff1660e01b8152600401600060405180830381600087803b158015610c9757600080fd5b505af1158015610cab573d6000803e3d6000fd5b5050505050505050565b604051610cc190611354565b604051809103906000f080158015610cdd573d6000803e3d6000fd5b50600080546001600160a01b0319166001600160a01b0392909216919091179055604051610d0a90611361565b604051809103906000f080158015610d26573d6000803e3d6000fd5b50600180546001600160a01b0319166001600160a01b0392909216919091179055565b6003546040516204966760e11b815260006004820181905291829182918291829182916001600160a01b039091169062092cce906024016105206040518083038186803b158015610d9957600080fd5b505afa158015610dad573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dd191906113b4565b602080820151610160830151608084015160a09094015160408051808201909152600c81526b0e4cae6cae4eccac886c2e6d60a31b94810194909452919a509850919650909450869350610e2892509050826110d5565b600354600154604051637d3ba80f60e01b81526000600482018190526001600160a01b039283166024830152928392839283929190911690637d3ba80f906044016101206040518083038186803b158015610e8257600080fd5b505afa158015610e96573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610eba9190611469565b505050505093509350935093506000610edc610ed585611145565b8b9061115e565b9050610f0d6040518060400160405280600d81526020016c706f736974696f6e56616c756560981b815250826110d5565b6000610f19828961115e565b90506000610f27868b61115e565b610f3190886116e5565b90506000610f3f8d8861115e565b610f4990836115e7565b9050610f83604051806040016040528060168152602001750dac2e4ced2dc84c2d8c2dcc6ca8ce4deda9a86888ab60531b815250866110d5565b610fb26040518060400160405280600d81526020016c6d617267696e42616c616e636560981b815250826110d5565b600089610fbf85846116e5565b610fc991906116e5565b90506000610fd78b846116e5565b9050610fe38682611195565b9f505050505050505050505050611022604051806040016040528060088152602001676c6576657261676560c01b81525061101d87611076565b6111db565b5050505090565b60008083851490507f54064f459ac12c35a69d1806fade6c275221bb7b4190e4ea64bf57e373cbb16381868686604051611066949392919061155e565b60405180910390a1949350505050565b6000808212156110cd5760405162461bcd60e51b815260206004820181905260248201527f53616665436173743a2076616c7565206d75737420626520706f73697469766560448201526064015b60405180910390fd5b50805b919050565b600081126111105761110b826040518060400160405280600381526020016201d10160ed1b81525061110684611076565b611220565b611141565b61114182604051806040016040528060038152602001623a202d60e81b81525061110661113c85611145565b611076565b5050565b6000808212156110cd576111588261126c565b92915050565b6000670de0b6b3a76400006111846111768585611279565b670de0b6b3a7640000611285565b61118e9190611628565b9392505050565b6000808212156111b6576111a88261126c565b91506111b38361126c565b92505b61118e826111d56111cf86670de0b6b3a7640000611279565b85611285565b9061130f565b61114182826040516024016111f19291906115c5565b60408051601f198184030181529190526020810180516001600160e01b03166309710a9d60e41b17905261131b565b6112678383836040516024016112389392919061158f565b60408051601f198184030181529190526020810180516001600160e01b031663f362ca5960e01b17905261131b565b505050565b600061115860008361133c565b600061118e8284611662565b60008082136112d65760405162461bcd60e51b815260206004820152601f60248201527f726f756e6448616c665570206f6e6c7920737570706f7274732079203e20300060448201526064016110c4565b600083126112fa576112f36112ec600284611628565b8490611348565b9050611158565b61118e611308600284611628565b849061133c565b600061118e8284611628565b80516a636f6e736f6c652e6c6f67602083016000808483855afa5050505050565b600061118e82846116e5565b600061118e82846115e7565b612a46806117b083390190565b612d5a806141f683390190565b805180151581146110d057600080fd5b60006020828403121561138f578081fd5b815161118e81611797565b6000602082840312156113ab578081fd5b61118e8261136e565b60008060006105208085870312156113ca578283fd5b8451600581106113d8578384fd5b809450506020808601516113eb81611797565b9350605f860187136113fb578283fd5b6040516104e0810181811067ffffffffffffffff8211171561141f5761141f611781565b8060405250806040880189858a011115611437578586fd5b8594505b602785101561145a57805182526001949094019390830190830161143b565b50508093505050509250925092565b60008060008060008060008060006101208a8c031215611487578485fd5b8951985060208a0151975060408a0151965060608a0151955060808a015194506114b360a08b0161136e565b93506114c160c08b0161136e565b92506114cf60e08b0161136e565b91506101008a015190509295985092959850929598565b6000602082840312156114f7578081fd5b5035919050565b60006020828403121561150f578081fd5b5051919050565b6000815180845261152e81602086016020860161173b565b601f01601f19169290920160200192915050565b6000825161155481846020870161173b565b9190910192915050565b60008515158252846020830152836040830152608060608301526115856080830184611516565b9695505050505050565b6000606082526115a26060830186611516565b82810360208401526115b48186611516565b915050826040830152949350505050565b6000604082526115d86040830185611516565b90508260208301529392505050565b600080821280156001600160ff1b03849003851316156116095761160961176b565b600160ff1b83900384128116156116225761162261176b565b50500190565b60008261164357634e487b7160e01b81526012600452602481fd5b600160ff1b82146000198414161561165d5761165d61176b565b500590565b60006001600160ff1b03818413828413808216868404861116156116885761168861176b565b600160ff1b848712828116878305891216156116a6576116a661176b565b8587129250878205871284841616156116c1576116c161176b565b878505871281841616156116d7576116d761176b565b505050929093029392505050565b60008083128015600160ff1b8501841216156117035761170361176b565b6001600160ff1b038401831381161561171e5761171e61176b565b50500390565b6000828210156117365761173661176b565b500390565b60005b8381101561175657818101518382015260200161173e565b83811115611765576000848401525b50505050565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b03811681146117ac57600080fd5b5056fe608060405234801561001057600080fd5b50612a26806100206000396000f3fe608060405234801561001057600080fd5b50600436106101f05760003560e01c8063715018a61161010f578063c0c53b8b116100a2578063d505accf11610071578063d505accf14610456578063dd62ed3e14610469578063f2fde38b1461047c578063fad3cc4b1461048f576101f0565b8063c0c53b8b14610409578063cbc1248b1461041c578063ce6a33801461042f578063d331bef714610443576101f0565b80639af1d35a116100de5780639af1d35a146103c6578063a457c2d7146103d0578063a9059cbb146103e3578063a9fae5fd146103f6576101f0565b8063715018a6146103925780637ecebe001461039a5780638da5cb5b146103ad57806395d89b41146103be576101f0565b8063313ce567116101875780633cd95611116101565780633cd95611146102ff5780633d18678e14610334578063572b6c051461034757806370a0823114610369576101f0565b8063313ce567146102a95780633535f48b146102b85780633644e515146102e457806339509351146102ec576101f0565b806318160ddd116101c357806318160ddd1461025e57806318787a0f146102705780631c1f8aa31461028357806323b872dd14610296576101f0565b8063054ee785146101f557806306fdde031461020a578063095ea7b3146102285780631569aa251461024b575b600080fd5b610208610203366004612487565b6104a2565b005b610212610517565b60405161021f919061280d565b60405180910390f35b61023b6102363660046125da565b6105aa565b604051901515815260200161021f565b6102086102593660046126ce565b6105c7565b6035545b60405190815260200161021f565b61020861027e366004612605565b61064c565b610208610291366004612487565b6108d9565b61023b6102a4366004612525565b610945565b6040516012815260200161021f565b610131546102cc906001600160a01b031681565b6040516001600160a01b03909116815260200161021f565b610262610a16565b61023b6102fa3660046125da565b610a25565b6102cc61030d3660046126aa565b6101336020908152600092835260408084209091529082529020546001600160a01b031681565b61020861034236600461267a565b610a79565b61023b610355366004612487565b60fe546001600160a01b0390811691161490565b610262610377366004612487565b6001600160a01b031660009081526033602052604090205490565b610208610ac8565b6102626103a8366004612487565b610b1d565b60cc546001600160a01b03166102cc565b610212610b3d565b6102626101325481565b61023b6103de3660046125da565b610b4c565b61023b6103f13660046125da565b610c03565b610208610404366004612605565b610c17565b6102086104173660046124db565b610e82565b61020861042a3660046126f4565b610f7d565b610130546102cc906001600160a01b031681565b610208610451366004612785565b6111e4565b610208610464366004612565565b6111f8565b6102626104773660046124a3565b61133e565b61020861048a366004612487565b611369565b61020861049d366004612785565b611423565b6104aa611437565b6001600160a01b03166104c560cc546001600160a01b031690565b6001600160a01b0316146104f45760405162461bcd60e51b81526004016104eb906128ae565b60405180910390fd5b61013080546001600160a01b0319166001600160a01b0392909216919091179055565b60606036805461052690612990565b80601f016020809104026020016040519081016040528092919081815260200182805461055290612990565b801561059f5780601f106105745761010080835404028352916020019161059f565b820191906000526020600020905b81548152906001019060200180831161058257829003601f168201915b505050505090505b90565b60006105be6105b7611437565b8484611441565b50600192915050565b6105cf611437565b6001600160a01b03166105ea60cc546001600160a01b031690565b6001600160a01b0316146106105760405162461bcd60e51b81526004016104eb906128ae565b6000928352610133602090815260408085206001600160a01b0394851686529091529092208054919092166001600160a01b0319909116179055565b6000838152610133602090815260408083206001600160a01b03858116855292528083205490516392f72def60e01b815260048101889052600160248201529116919082906392f72def90604401602060405180830381600087803b1580156106b457600080fd5b505af11580156106c8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106ec9190612692565b604051639a91999160e01b815260048101829052600160248201529091506001600160a01b03831690639a9199919060440160206040518083038186803b15801561073657600080fd5b505afa15801561074a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061076e9190612692565b9050838111156107cc5760405162461bcd60e51b8152602060048201526024808201527f636f6c6c61746572616c207265717569726564206578656365656473206d6178604482015263696d756d60e01b60648201526084016104eb565b826001600160a01b03166323b872dd6107e3611437565b6040516001600160e01b031960e084901b1681526001600160a01b039182166004820152908516602482015260448101849052606401602060405180830381600087803b15801561083357600080fd5b505af1158015610847573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061086b919061265a565b5060405163690e7c0960e01b8152600481018790526001600160a01b0383169063690e7c0990602401600060405180830381600087803b1580156108ae57600080fd5b505af11580156108c2573d6000803e3d6000fd5b505050506108d08787611566565b50505050505050565b6108e1611437565b6001600160a01b03166108fc60cc546001600160a01b031690565b6001600160a01b0316146109225760405162461bcd60e51b81526004016104eb906128ae565b61013180546001600160a01b0319166001600160a01b0392909216919091179055565b6000610952848484611646565b6001600160a01b038416600090815260346020526040812081610973611437565b6001600160a01b03166001600160a01b03168152602001908152602001600020549050828110156109f75760405162461bcd60e51b815260206004820152602860248201527f45524332303a207472616e7366657220616d6f756e74206578636565647320616044820152676c6c6f77616e636560c01b60648201526084016104eb565b610a0b85610a03611437565b858403611441565b506001949350505050565b6000610a20611814565b905090565b60006105be610a32611437565b848460346000610a40611437565b6001600160a01b03908116825260208083019390935260409182016000908120918b1681529252902054610a7491906128e3565b611441565b610a81611437565b6001600160a01b0316610a9c60cc546001600160a01b031690565b6001600160a01b031614610ac25760405162461bcd60e51b81526004016104eb906128ae565b61013255565b610ad0611437565b6001600160a01b0316610aeb60cc546001600160a01b031690565b6001600160a01b031614610b115760405162461bcd60e51b81526004016104eb906128ae565b610b1b600061188f565b565b6001600160a01b0381166000908152609960205260408120545b92915050565b60606037805461052690612990565b60008060346000610b5b611437565b6001600160a01b0390811682526020808301939093526040918201600090812091881681529252902054905082811015610be55760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b60648201526084016104eb565b610bf9610bf0611437565b85858403611441565b5060019392505050565b60006105be610c10611437565b8484611646565b610c28610c22611437565b856118e1565b6000838152610133602090815260408083206001600160a01b03858116855292528083205490516392f72def60e01b815260048101889052602481018490529116919082906392f72def90604401602060405180830381600087803b158015610c9057600080fd5b505af1158015610ca4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cc89190612692565b604051639a91999160e01b815260048101829052600060248201529091506001600160a01b03831690639a9199919060440160206040518083038186803b158015610d1257600080fd5b505afa158015610d26573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d4a9190612692565b905083811015610d9c5760405162461bcd60e51b815260206004820152601e60248201527f636f6c6c61746572616c20676f74206261636b20697320746f6f206c6f77000060448201526064016104eb565b604051630575f5a760e11b8152600481018790526001600160a01b03831690630aebeb4e90602401600060405180830381600087803b158015610dde57600080fd5b505af1158015610df2573d6000803e3d6000fd5b505060405163a9059cbb60e01b81526001600160a01b038a81166004830152602482018590528616925063a9059cbb9150604401602060405180830381600087803b158015610e4057600080fd5b505af1158015610e54573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e78919061265a565b5050505050505050565b600054610100900460ff1680610e9b575060005460ff16155b610eb75760405162461bcd60e51b81526004016104eb90612860565b600054610100900460ff16158015610ed9576000805461ffff19166101011790555b610ee1611a2c565b610f27604051806040016040528060088152602001675553444c656d6d6160c01b815250604051806040016040528060048152602001631554d11360e21b815250611aa7565b610f50604051806040016040528060088152602001675553444c656d6d6160c01b815250611b26565b610f5984611bc6565b610f65600084846105c7565b8015610f77576000805461ff00191690555b50505050565b6000858152610133602090815260408083206001600160a01b038089168552925291829020549151635e64e07b60e11b8152911690819063bcc9c0f690610fce9033908890889088906004016127c5565b602060405180830381600087803b158015610fe857600080fd5b505af1158015610ffc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611020919061265a565b6110615760405162461bcd60e51b8152602060048201526012602482015271726562616c616e6365206e6f7420646f6e6560701b60448201526064016104eb565b600084126110db57600061107485611c2e565b90506000612710610132548361108a919061291b565b61109491906128fb565b905060006110a28284612979565b610130549091506110bc906001600160a01b031683611566565b610131546110d3906001600160a01b031682611566565b5050506111dc565b60006110ee6110e986611c84565b611c2e565b610131549091506000906111329061110f906001600160a01b03163061133e565b610131546001600160a01b03166000908152603360205260409020545b90611c91565b6101305490915060009061117490611153906001600160a01b03163061133e565b610130546001600160a01b031660009081526033602052604090205461112c565b905060006111828385611c91565b9050600061119a6111938387612979565b8490611c91565b905081156111b957610131546111b9906001600160a01b031683611ca9565b80156111d657610130546111d6906001600160a01b031682611ca9565b50505050505b505050505050565b610f776111ef611437565b85858585610c17565b834211156112485760405162461bcd60e51b815260206004820152601d60248201527f45524332305065726d69743a206578706972656420646561646c696e6500000060448201526064016104eb565b6000609a548888886112598c611d2a565b6040805160208101969096526001600160a01b0394851690860152929091166060840152608083015260a082015260c0810186905260e00160405160208183030381529060405280519060200120905060006112b482611d52565b905060006112c482878787611da0565b9050896001600160a01b0316816001600160a01b0316146113275760405162461bcd60e51b815260206004820152601e60248201527f45524332305065726d69743a20696e76616c6964207369676e6174757265000060448201526064016104eb565b6113328a8a8a611441565b50505050505050505050565b6001600160a01b03918216600090815260346020908152604080832093909416825291909152205490565b611371611437565b6001600160a01b031661138c60cc546001600160a01b031690565b6001600160a01b0316146113b25760405162461bcd60e51b81526004016104eb906128ae565b6001600160a01b0381166114175760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016104eb565b6114208161188f565b50565b610f7761142e611437565b8585858561064c565b6000610a20611dc8565b6001600160a01b0383166114a35760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b60648201526084016104eb565b6001600160a01b0382166115045760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b60648201526084016104eb565b6001600160a01b0383811660008181526034602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591015b60405180910390a3505050565b6001600160a01b0382166115bc5760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f20616464726573730060448201526064016104eb565b80603560008282546115ce91906128e3565b90915550506001600160a01b038216600090815260336020526040812080548392906115fb9084906128e3565b90915550506040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35b5050565b6001600160a01b0383166116aa5760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b60648201526084016104eb565b6001600160a01b03821661170c5760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b60648201526084016104eb565b6001600160a01b038316600090815260336020526040902054818110156117845760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b60648201526084016104eb565b6001600160a01b038085166000908152603360205260408082208585039055918516815290812080548492906117bb9084906128e3565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405161180791815260200190565b60405180910390a3610f77565b6000610a207f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f61184360655490565b6066546040805160208101859052908101839052606081018290524660808201523060a082015260009060c0016040516020818303038152906040528051906020012090509392505050565b60cc80546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6001600160a01b0382166119415760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b60648201526084016104eb565b6001600160a01b038216600090815260336020526040902054818110156119b55760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b60648201526084016104eb565b6001600160a01b03831660009081526033602052604081208383039055603580548492906119e4908490612979565b90915550506040518281526000906001600160a01b038516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90602001611559565b505050565b600054610100900460ff1680611a45575060005460ff16155b611a615760405162461bcd60e51b81526004016104eb90612860565b600054610100900460ff16158015611a83576000805461ffff19166101011790555b611a8b611df4565b611a93611e5e565b8015611420576000805461ff001916905550565b600054610100900460ff1680611ac0575060005460ff16155b611adc5760405162461bcd60e51b81526004016104eb90612860565b600054610100900460ff16158015611afe576000805461ffff19166101011790555b611b06611df4565b611b108383611ec5565b8015611a27576000805461ff0019169055505050565b600054610100900460ff1680611b3f575060005460ff16155b611b5b5760405162461bcd60e51b81526004016104eb90612860565b600054610100900460ff16158015611b7d576000805461ffff19166101011790555b611b85611df4565b611ba882604051806040016040528060018152602001603160f81b815250611f5a565b611bb182611fe4565b8015611642576000805461ff00191690555050565b600054610100900460ff1680611bdf575060005460ff16155b611bfb5760405162461bcd60e51b81526004016104eb90612860565b600054610100900460ff16158015611c1d576000805461ffff19166101011790555b611c25611df4565b611bb182612074565b600080821215611c805760405162461bcd60e51b815260206004820181905260248201527f53616665436173743a2076616c7565206d75737420626520706f73697469766560448201526064016104eb565b5090565b6000610b376000836120fb565b6000818310611ca05781611ca2565b825b9392505050565b6000611cb5833061133e565b905081811015611d135760405162461bcd60e51b8152602060048201526024808201527f45524332303a206275726e20616d6f756e74206578636565647320616c6c6f77604482015263616e636560e01b60648201526084016104eb565b611d208330848403611441565b611a2783836118e1565b6001600160a01b03811660009081526099602052604090208054600181018255905b50919050565b6000610b37611d5f611814565b8360405161190160f01b6020820152602281018390526042810182905260009060620160405160208183030381529060405280519060200120905092915050565b6000806000611db187878787612107565b91509150611dbe816121f4565b5095945050505050565b60fe546000906001600160a01b0316331415611ded575060131936013560601c6105a7565b50336105a7565b600054610100900460ff1680611e0d575060005460ff16155b611e295760405162461bcd60e51b81526004016104eb90612860565b600054610100900460ff16158015611a93576000805461ffff19166101011790558015611420576000805461ff001916905550565b600054610100900460ff1680611e77575060005460ff16155b611e935760405162461bcd60e51b81526004016104eb90612860565b600054610100900460ff16158015611eb5576000805461ffff19166101011790555b611a93611ec0611437565b61188f565b600054610100900460ff1680611ede575060005460ff16155b611efa5760405162461bcd60e51b81526004016104eb90612860565b600054610100900460ff16158015611f1c576000805461ffff19166101011790555b8251611f2f9060369060208601906123f7565b508151611f439060379060208501906123f7565b508015611a27576000805461ff0019169055505050565b600054610100900460ff1680611f73575060005460ff16155b611f8f5760405162461bcd60e51b81526004016104eb90612860565b600054610100900460ff16158015611fb1576000805461ffff19166101011790555b82516020808501919091208351918401919091206065919091556066558015611a27576000805461ff0019169055505050565b600054610100900460ff1680611ffd575060005460ff16155b6120195760405162461bcd60e51b81526004016104eb90612860565b600054610100900460ff1615801561203b576000805461ffff19166101011790555b7f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9609a558015611642576000805461ff00191690555050565b600054610100900460ff168061208d575060005460ff16155b6120a95760405162461bcd60e51b81526004016104eb90612860565b600054610100900460ff161580156120cb576000805461ffff19166101011790555b60fe80546001600160a01b0319166001600160a01b0384161790558015611642576000805461ff00191690555050565b6000611ca2828461293a565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a083111561213e57506000905060036121eb565b8460ff16601b1415801561215657508460ff16601c14155b1561216757506000905060046121eb565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa1580156121bb573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b0381166121e4576000600192509250506121eb565b9150600090505b94509492505050565b600081600481111561221657634e487b7160e01b600052602160045260246000fd5b141561222157611420565b600181600481111561224357634e487b7160e01b600052602160045260246000fd5b14156122915760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e6174757265000000000000000060448201526064016104eb565b60028160048111156122b357634e487b7160e01b600052602160045260246000fd5b14156123015760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e6774680060448201526064016104eb565b600381600481111561232357634e487b7160e01b600052602160045260246000fd5b141561237c5760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b60648201526084016104eb565b600481600481111561239e57634e487b7160e01b600052602160045260246000fd5b14156114205760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c604482015261756560f01b60648201526084016104eb565b82805461240390612990565b90600052602060002090601f016020900481019282612425576000855561246b565b82601f1061243e57805160ff191683800117855561246b565b8280016001018555821561246b579182015b8281111561246b578251825591602001919060010190612450565b50611c809291505b80821115611c805760008155600101612473565b600060208284031215612498578081fd5b8135611ca2816129db565b600080604083850312156124b5578081fd5b82356124c0816129db565b915060208301356124d0816129db565b809150509250929050565b6000806000606084860312156124ef578081fd5b83356124fa816129db565b9250602084013561250a816129db565b9150604084013561251a816129db565b809150509250925092565b600080600060608486031215612539578283fd5b8335612544816129db565b92506020840135612554816129db565b929592945050506040919091013590565b600080600080600080600060e0888a03121561257f578283fd5b873561258a816129db565b9650602088013561259a816129db565b95506040880135945060608801359350608088013560ff811681146125bd578384fd5b9699959850939692959460a0840135945060c09093013592915050565b600080604083850312156125ec578182fd5b82356125f7816129db565b946020939093013593505050565b600080600080600060a0868803121561261c578081fd5b8535612627816129db565b9450602086013593506040860135925060608601359150608086013561264c816129db565b809150509295509295909350565b60006020828403121561266b578081fd5b81518015158114611ca2578182fd5b60006020828403121561268b578081fd5b5035919050565b6000602082840312156126a3578081fd5b5051919050565b600080604083850312156126bc578182fd5b8235915060208301356124d0816129db565b6000806000606084860312156126e2578283fd5b83359250602084013561250a816129db565b60008060008060006080868803121561270b578283fd5b85359450602086013561271d816129db565b935060408601359250606086013567ffffffffffffffff80821115612740578283fd5b818801915088601f830112612753578283fd5b813581811115612761578384fd5b896020828501011115612772578384fd5b9699959850939650602001949392505050565b6000806000806080858703121561279a578182fd5b84359350602085013592506040850135915060608501356127ba816129db565b939692955090935050565b6001600160a01b0385168152602081018490526060604082018190528101829052600082846080840137818301608090810191909152601f909201601f191601019392505050565b6000602080835283518082850152825b818110156128395785810183015185820160400152820161281d565b8181111561284a5783604083870101525b50601f01601f1916929092016040019392505050565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b600082198211156128f6576128f66129c5565b500190565b60008261291657634e487b7160e01b81526012600452602481fd5b500490565b6000816000190483118215151615612935576129356129c5565b500290565b60008083128015600160ff1b850184121615612958576129586129c5565b6001600160ff1b0384018313811615612973576129736129c5565b50500390565b60008282101561298b5761298b6129c5565b500390565b600181811c908216806129a457607f821691505b60208210811415611d4c57634e487b7160e01b600052602260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6001600160a01b038116811461142057600080fdfea26469706673582212201dfcc89b02307356f972143fac6744c95dc4e6ee183b7a4d5e46318a7a83e5cb64736f6c63430008030033608060405234801561001057600080fd5b50612d3a806100206000396000f3fe608060405234801561001057600080fd5b50600436106101f05760003560e01c80638ed59fd01161010f578063bcc9c0f6116100a2578063d555f62311610071578063d555f623146103c8578063d8dfeb45146103db578063ec9c6c30146103ee578063f2fde38b146103f7576101f0565b8063bcc9c0f614610386578063beba14e114610399578063beeb9dfb146103ac578063d1870db9146103b5576101f0565b80639a919991116100de5780639a91999114610345578063a18a7bfc14610358578063a1f9637d1461036b578063a29558341461037e576101f0565b80638ed59fd01461031857806392f72def1461032157806398a367a01461033457806399cbad761461033d576101f0565b806342bf732511610187578063690e7c0911610156578063690e7c09146102e2578063715018a6146102f5578063851b137b146102fd5780638da5cb5b14610310576101f0565b806342bf732514610269578063572b6c0514610272578063665a11ca146102a457806368447c93146102cf576101f0565b8063122e7b07116101c3578063122e7b071461022d5780631d8688751461024e57806333a581d2146102575780633d7bfaaa14610260576101f0565b80630aebeb4e146101f55780630d7e5a791461020a57806310dd56861461021257806311da60b414610225575b600080fd5b610208610203366004612836565b61040a565b005b6102086107ab565b610208610220366004612836565b610948565b61020861098c565b61023b6001600160ff1b0381565b6040519081526020015b60405180910390f35b61023b60a15481565b61023b60001981565b61023b60a25481565b61023b60985481565b61029461028036600461249b565b6065546001600160a01b0390811691161490565b6040519015158152602001610245565b6097546102b7906001600160a01b031681565b6040516001600160a01b039091168152602001610245565b609d546102b7906001600160a01b031681565b6102086102f0366004612836565b610a9e565b610208610df0565b61020861030b36600461249b565b610e3b565b6102b7610e9c565b61023b609f5481565b61023b61032f36600461284e565b610eac565b61023b60a05481565b61023b611272565b61023b61035336600461284e565b6113b9565b61020861036636600461249b565b61144f565b609c546102b7906001600160a01b031681565b6102086114b0565b610294610394366004612549565b61167d565b609b546102b7906001600160a01b031681565b61023b609e5481565b6102086103c33660046124da565b6119d1565b6102086103d636600461249b565b611c7e565b6099546102b7906001600160a01b031681565b61023b609a5481565b61020861040536600461249b565b611cdf565b609b546001600160a01b031661041e611d8f565b6001600160a01b03161461044d5760405162461bcd60e51b81526004016104449061287d565b60405180910390fd5b600061045a826000610eac565b6097546098546040516204966760e11b81529293506000926001600160a01b039092169162092cce916104939160040190815260200190565b6105206040518083038186803b1580156104ac57600080fd5b505afa1580156104c0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104e491906126af565b509091506004905081600481111561050c57634e487b7160e01b600052602160045260246000fd5b1461070357609754609854604051637d3ba80f60e01b815260048101919091523060248201526000916001600160a01b031690637d3ba80f906044016101206040518083038186803b15801561056157600080fd5b505afa158015610575573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610599919061278e565b50506097546098549698506001600160a01b0316965063709240c49594503093506105c992508a9150611d9e9050565b6105d290612c85565b609d546040516001600160e01b031960e087901b16815261060b94939291600091600019916001600160a01b0316908390600401612937565b602060405180830381600087803b15801561062557600080fd5b505af1158015610639573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061065d9190612749565b506097546098546001600160a01b0390911690636ef05a40903061068087611d9e565b6040516001600160e01b031960e086901b16815260048101939093526001600160a01b0390911660248301526044820152606401600060405180830381600087803b1580156106ce57600080fd5b505af11580156106e2573d6000803e3d6000fd5b50505050610701816106f386611d9e565b6106fc90612c85565b611e0c565b505b609954609b546001600160a01b039182169163a9059cbb91166107278560006113b9565b6040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401602060405180830381600087803b15801561076d57600080fd5b505af1158015610781573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107a591906125cd565b50505050565b609b546040805163019cd46760e71b81529051734e352cf164e64adcbad318c3a1e222e9eba4ce42926000926001600160a01b039091169163ce6a338091600480820192602092909190829003018186803b15801561080957600080fd5b505afa15801561081d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061084191906124be565b6040516370a0823160e01b81523060048201529091506001600160a01b0383169063a9059cbb90839083906370a082319060240160206040518083038186803b15801561088d57600080fd5b505afa1580156108a1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108c59190612749565b6040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401602060405180830381600087803b15801561090b57600080fd5b505af115801561091f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061094391906125cd565b505050565b610950611d8f565b6001600160a01b0316610961610e9c565b6001600160a01b0316146109875760405162461bcd60e51b815260040161044490612902565b60a255565b609754609854604051637d3ba80f60e01b815260048101919091523060248201526000916001600160a01b031690637d3ba80f906044016101206040518083038186803b1580156109dc57600080fd5b505afa1580156109f0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a14919061278e565b50505050505050915050610a2f610a2a82611f0d565b611f20565b60a1556097546098546040516312c5a32760e31b815260048101919091523060248201526001600160a01b039091169063962d1938906044015b600060405180830381600087803b158015610a8357600080fd5b505af1158015610a97573d6000803e3d6000fd5b5050505050565b609b546001600160a01b0316610ab2611d8f565b6001600160a01b031614610ad85760405162461bcd60e51b81526004016104449061287d565b6000610ae5826001610eac565b9050610af28160016113b9565b6099546040516370a0823160e01b81523060048201526001600160a01b03909116906370a082319060240160206040518083038186803b158015610b3557600080fd5b505afa158015610b49573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b6d9190612749565b1015610bb35760405162461bcd60e51b81526020600482015260156024820152741b9bdd08195b9bdd59da0818dbdb1b185d195c985b605a1b6044820152606401610444565b6097546098546001600160a01b03909116906378f140ea9030610bd585611d9e565b6040516001600160e01b031960e086901b16815260048101939093526001600160a01b0390911660248301526044820152606401600060405180830381600087803b158015610c2357600080fd5b505af1158015610c37573d6000803e3d6000fd5b5050609754609854604051637d3ba80f60e01b81526004810191909152306024820152600093506001600160a01b039091169150637d3ba80f906044016101206040518083038186803b158015610c8d57600080fd5b505afa158015610ca1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cc5919061278e565b5050505050505091505060a25483610cdf610a2a84611f0d565b610ce99190612a0b565b1115610d2e5760405162461bcd60e51b81526020600482015260146024820152731b585e081c1bdcda5d1a5bdb881c995858da195960621b6044820152606401610444565b6097546098546001600160a01b039091169063709240c49030610d5087611d9e565b609d546040516001600160e01b031960e087901b168152610d90949392916001600160ff1b0391600019916001600160a01b031690600090600401612937565b602060405180830381600087803b158015610daa57600080fd5b505af1158015610dbe573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610de29190612749565b50610943816106fc85611d9e565b610df8611d8f565b6001600160a01b0316610e09610e9c565b6001600160a01b031614610e2f5760405162461bcd60e51b815260040161044490612902565b610e396000611f72565b565b610e43611d8f565b6001600160a01b0316610e54610e9c565b6001600160a01b031614610e7a5760405162461bcd60e51b815260040161044490612902565b609b80546001600160a01b0319166001600160a01b0392909216919091179055565b6033546001600160a01b03165b90565b609754604080516338437e9960e11b815290516000926001600160a01b031691637086fd32916004808301928692919082900301818387803b158015610ef157600080fd5b505af1158015610f05573d6000803e3d6000fd5b50505050600082610f2757610f1984611d9e565b610f2290612c85565b610f30565b610f3084611d9e565b6097546098546040516204966760e11b81529293506000926001600160a01b039092169162092cce91610f699160040190815260200190565b6105206040518083038186803b158015610f8257600080fd5b505afa158015610f96573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fba91906126af565b5090915060049050816004811115610fe257634e487b7160e01b600052602160045260246000fd5b14156111815783156110455760405162461bcd60e51b815260206004820152602660248201527f63616e6e6f74206f70656e207768656e2070657270657475616c206861732073604482015265195d1d1b195960d21b6064820152608401610444565b609754609854604051637d3ba80f60e01b815260048101919091523060248201526000916001600160a01b031690637d3ba80f906044016101206040518083038186803b15801561109557600080fd5b505afa1580156110a9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110cd919061278e565b50505050945050505050806000146110e7576110e761098c565b60a1546099546040516370a0823160e01b815230600482015288916001600160a01b0316906370a082319060240160206040518083038186803b15801561112d57600080fd5b505afa158015611141573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111659190612749565b61116f9190612bfc565b6111799190612a51565b93505061126a565b609754609854609d546040516342ee6b0560e11b81526004810192909252306024830152604482018590526001600160a01b0390811660648301526000608483018190529283929116906385dcd60a9060a40160606040518083038186803b1580156111ec57600080fd5b505afa158015611200573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112249190612761565b5091509150600061123e836112388a611d9e565b90611fc4565b90508661125757611252610a2a8383612c1b565b611264565b611264610a2a83836129ca565b95505050505b505092915050565b6097546098546040516204966760e11b81526004810191909152600091829182916001600160a01b03169062092cce906024016105206040518083038186803b1580156112be57600080fd5b505afa1580156112d2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112f691906126af565b60800151609754609854604051637d3ba80f60e01b81526004810191909152306024820152919550600094506001600160a01b03169250637d3ba80f91506044016101206040518083038186803b15801561135057600080fd5b505afa158015611364573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611388919061278e565b505050505050509150506113a58282611fc490919063ffffffff16565b609e546113b29190612c1b565b9250505090565b60008180156113e95750609a546113d1906012612c5a565b6113dc90600a612aab565b6113e69084612c71565b15155b1561142357609a546113fc906012612c5a565b61140790600a612aab565b6114119084612a51565b61141c906001612a0b565b9050611449565b609a54611431906012612c5a565b61143c90600a612aab565b6114469084612a51565b90505b92915050565b611457611d8f565b6001600160a01b0316611468610e9c565b6001600160a01b03161461148e5760405162461bcd60e51b815260040161044490612902565b609d80546001600160a01b0319166001600160a01b0392909216919091179055565b6114b8611d8f565b6001600160a01b03166114c9610e9c565b6001600160a01b0316146114ef5760405162461bcd60e51b815260040161044490612902565b6097546098546040516204966760e11b815260009283926001600160a01b039091169162092cce916115279160040190815260200190565b6105206040518083038186803b15801561154057600080fd5b505afa158015611554573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061157891906126af565b61016001516099549094506001600160a01b031692506323b872dd915061159f9050611d8f565b306115b36115ac86611f20565b60016113b9565b6040516001600160e01b031960e086901b1681526001600160a01b0393841660048201529290911660248301526044820152606401602060405180830381600087803b15801561160257600080fd5b505af1158015611616573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061163a91906125cd565b50609754609854604051633c78a07560e11b81526004810191909152306024820152604481018390526001600160a01b03909116906378f140ea90606401610a69565b609754604080516338437e9960e11b815290516000926001600160a01b031691637086fd32916004808301928692919082900301818387803b1580156116c257600080fd5b505af11580156116d6573d6000803e3d6000fd5b5050609b546001600160a01b031691506116f09050611d8f565b6001600160a01b0316146117165760405162461bcd60e51b81526004016104449061287d565b609c546001600160a01b038681169116146117735760405162461bcd60e51b815260206004820152601a60248201527f6f6e6c7920726562616c616e63657220697320616c6c6f7765640000000000006044820152606401610444565b60008061178284860186612815565b915091506000611790611272565b609754609854609d546040516342ee6b0560e11b81526004810192909252306024830152604482018b90526001600160a01b039081166064830152600060848301819052939450839216906385dcd60a9060a40160606040518083038186803b1580156117fc57600080fd5b505afa158015611810573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118349190612761565b50915091506000611848836112388c611f0d565b90506000611859610a2a84846129ca565b905060008b12156118895761186d81611d9e565b609f600082825461187e9190612c1b565b909155506118a99050565b61189281611d9e565b609f60008282546118a391906129ca565b90915550505b6000609f54866118b99190612c1b565b905064e8d4a510006118ca82611f0d565b13156119065760405162461bcd60e51b815260206004820152600b60248201526a1b9bdd08185b1b1bddd95960aa1b6044820152606401610444565b609760009054906101000a90046001600160a01b03166001600160a01b031663709240c4609854308f8c8c609d60009054906101000a90046001600160a01b031660006040518863ffffffff1660e01b815260040161196b9796959493929190612937565b602060405180830381600087803b15801561198557600080fd5b505af1158015611999573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119bd9190612749565b5060019d9c50505050505050505050505050565b600054610100900460ff16806119ea575060005460ff16155b611a065760405162461bcd60e51b8152600401610444906128b4565b600054610100900460ff16158015611a28576000805461ffff19166101011790555b611a30611ff4565b611a398761206f565b609780546001600160a01b0319166001600160a01b03881690811790915560988690556040805163066e082d60e11b8152905160009283928392630cdc105a9160048082019261024092909190829003018186803b158015611a9a57600080fd5b505afa158015611aae573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ad291906125e9565b945050935050925082611b1d5760405162461bcd60e51b8152602060048201526013602482015272706f6f6c206973206e6f742072756e6e696e6760681b6044820152606401610444565b60a09190910151609980546001600160a01b0319166001600160a01b0390921691909117905551609a5550611b5183611c7e565b611b5a84610e3b565b611b6382610948565b60995460975460405163095ea7b360e01b81526001600160a01b039182166004820152600019602482015291169063095ea7b390604401602060405180830381600087803b158015611bb457600080fd5b505af1158015611bc8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bec91906125cd565b50609754609854604051632d47ba5760e01b81526004810191909152306024820152670de0b6b3a764000060448201526001600160a01b0390911690632d47ba5790606401600060405180830381600087803b158015611c4b57600080fd5b505af1158015611c5f573d6000803e3d6000fd5b505050508015611c75576000805461ff00191690555b50505050505050565b611c86611d8f565b6001600160a01b0316611c97610e9c565b6001600160a01b031614611cbd5760405162461bcd60e51b815260040161044490612902565b609c80546001600160a01b0319166001600160a01b0392909216919091179055565b611ce7611d8f565b6001600160a01b0316611cf8610e9c565b6001600160a01b031614611d1e5760405162461bcd60e51b815260040161044490612902565b6001600160a01b038116611d835760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610444565b611d8c81611f72565b50565b6000611d996120ed565b905090565b60006001600160ff1b03821115611e085760405162461bcd60e51b815260206004820152602860248201527f53616665436173743a2076616c756520646f65736e27742066697420696e2061604482015267371034b73a191a9b60c11b6064820152608401610444565b5090565b600080611e198484612119565b6097546098546040516204966760e11b8152600481019190915292945090925060009182916001600160a01b03169062092cce906024016105206040518083038186803b158015611e6957600080fd5b505afa158015611e7d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ea191906126af565b6080015193505084159150611ee6905057846000611ebf85836129ca565b9050611ee082611eda83609e54611fc490919063ffffffff16565b90612177565b609e5550505b8115610a9757611ef68183611fc4565b609e54611f0391906129ca565b609e555050505050565b600080821215611e0857611449826121bd565b600080821215611e085760405162461bcd60e51b815260206004820181905260248201527f53616665436173743a2076616c7565206d75737420626520706f7369746976656044820152606401610444565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6000670de0b6b3a7640000611fea611fdc85856121ca565b670de0b6b3a76400006121d6565b6114469190612a23565b600054610100900460ff168061200d575060005460ff16155b6120295760405162461bcd60e51b8152600401610444906128b4565b600054610100900460ff1615801561204b576000805461ffff19166101011790555b612053612259565b61205b6122c3565b8015611d8c576000805461ff001916905550565b600054610100900460ff1680612088575060005460ff16155b6120a45760405162461bcd60e51b8152600401610444906128b4565b600054610100900460ff161580156120c6576000805461ffff19166101011790555b6120ce612259565b6120d78261232a565b80156120e9576000805461ff00191690555b5050565b6065546000906001600160a01b0316331415612112575060131936013560601c610ea9565b5033610ea9565b60008061212684846123b1565b1561213657506000905081612170565b61213f83611f0d565b61214885611f0d565b1261215857508190506000612170565b612161846121bd565b61216b85856123d4565b915091505b9250929050565b6000808212156121985761218a826121bd565b9150612195836121bd565b92505b611446826121b76121b186670de0b6b3a76400006121ca565b856121d6565b906123e0565b60006114496000836123ec565b60006114468284612b79565b60008082136122275760405162461bcd60e51b815260206004820152601f60248201527f726f756e6448616c665570206f6e6c7920737570706f7274732079203e2030006044820152606401610444565b600083126122445761141c61223d600284612a23565b84906123d4565b611446612252600284612a23565b84906123ec565b600054610100900460ff1680612272575060005460ff16155b61228e5760405162461bcd60e51b8152600401610444906128b4565b600054610100900460ff1615801561205b576000805461ffff19166101011790558015611d8c576000805461ff001916905550565b600054610100900460ff16806122dc575060005460ff16155b6122f85760405162461bcd60e51b8152600401610444906128b4565b600054610100900460ff1615801561231a576000805461ffff19166101011790555b61205b612325611d8f565b611f72565b600054610100900460ff1680612343575060005460ff16155b61235f5760405162461bcd60e51b8152600401610444906128b4565b600054610100900460ff16158015612381576000805461ffff19166101011790555b606580546001600160a01b0319166001600160a01b03841617905580156120e9576000805461ff00191690555050565b60008215806123be575081155b156123cb57506001611449565b501860ff1d1590565b600061144682846129ca565b60006114468284612a23565b60006114468284612c1b565b600082601f830112612408578081fd5b61241260a0612978565b80838560a086011115612423578384fd5b835b6005811015612444578151845260209384019390910190600101612425565b509095945050505050565b600082601f83011261245f578081fd5b6124696080612978565b80838560808601111561247a578384fd5b835b600481101561244457815184526020938401939091019060010161247c565b6000602082840312156124ac578081fd5b81356124b781612ce1565b9392505050565b6000602082840312156124cf578081fd5b81516124b781612ce1565b60008060008060008060c087890312156124f2578182fd5b86356124fd81612ce1565b9550602087013561250d81612ce1565b945060408701359350606087013561252481612ce1565b9250608087013561253481612ce1565b8092505060a087013590509295509295509295565b6000806000806060858703121561255e578384fd5b843561256981612ce1565b935060208501359250604085013567ffffffffffffffff8082111561258c578384fd5b818701915087601f83011261259f578384fd5b8135818111156125ad578485fd5b8860208285010111156125be578485fd5b95989497505060200194505050565b6000602082840312156125de578081fd5b81516124b781612cf6565b60008060008060006102408688031215612601578283fd5b855161260c81612cf6565b8095505060208087015161261f81612cf6565b9450605f8701881361262f578384fd5b600761264261263d826129a9565b612978565b8060408a016101208b018c811115612658578889fd5b885b8581101561267f57825161266d81612ce1565b8552938601939186019160010161265a565b5082985061268d8d826123f8565b97505050505050506126a3876101c0880161244f565b90509295509295909350565b60008060006105208085870312156126c5578182fd5b8451600581106126d3578283fd5b809450506020808601516126e681612ce1565b9350605f860187136126f6578283fd5b602761270461263d826129a9565b80604089018a868b011115612717578687fd5b8695505b8386101561273957805183526001959095019491840191840161271b565b5080955050505050509250925092565b60006020828403121561275a578081fd5b5051919050565b600080600060608486031215612775578081fd5b8351925060208401519150604084015190509250925092565b60008060008060008060008060006101208a8c0312156127ac578687fd5b8951985060208a0151975060408a0151965060608a0151955060808a0151945060a08a01516127da81612cf6565b60c08b01519094506127eb81612cf6565b60e08b01519093506127fc81612cf6565b809250506101008a015190509295985092959850929598565b60008060408385031215612827578182fd5b50508035926020909101359150565b600060208284031215612847578081fd5b5035919050565b60008060408385031215612860578182fd5b82359150602083013561287281612cf6565b809150509250929050565b60208082526018908201527f6f6e6c79207573644c656d6d6120697320616c6c6f7765640000000000000000604082015260600190565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b9687526001600160a01b03958616602088015260408701949094526060860192909252608085015290911660a083015263ffffffff1660c082015260e00190565b604051601f8201601f1916810167ffffffffffffffff811182821017156129a1576129a1612ccb565b604052919050565b600067ffffffffffffffff8211156129c3576129c3612ccb565b5060051b90565b600080821280156001600160ff1b03849003851316156129ec576129ec612c9f565b600160ff1b8390038412811615612a0557612a05612c9f565b50500190565b60008219821115612a1e57612a1e612c9f565b500190565b600082612a3257612a32612cb5565b600160ff1b821460001984141615612a4c57612a4c612c9f565b500590565b600082612a6057612a60612cb5565b500490565b80825b6001808611612a775750612aa2565b818704821115612a8957612a89612c9f565b80861615612a9657918102915b9490941c938002612a68565b94509492505050565b60006114466000198484600082612ac4575060016124b7565b81612ad1575060006124b7565b8160018114612ae75760028114612af157612b1e565b60019150506124b7565b60ff841115612b0257612b02612c9f565b6001841b915084821115612b1857612b18612c9f565b506124b7565b5060208310610133831016604e8410600b8410161715612b51575081810a83811115612b4c57612b4c612c9f565b6124b7565b612b5e8484846001612a65565b808604821115612b7057612b70612c9f565b02949350505050565b60006001600160ff1b0381841382841380821686840486111615612b9f57612b9f612c9f565b600160ff1b84871282811687830589121615612bbd57612bbd612c9f565b858712925087820587128484161615612bd857612bd8612c9f565b87850587128184161615612bee57612bee612c9f565b505050929093029392505050565b6000816000190483118215151615612c1657612c16612c9f565b500290565b60008083128015600160ff1b850184121615612c3957612c39612c9f565b6001600160ff1b0384018313811615612c5457612c54612c9f565b50500390565b600082821015612c6c57612c6c612c9f565b500390565b600082612c8057612c80612cb5565b500690565b6000600160ff1b821415612c9b57612c9b612c9f565b0390565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b0381168114611d8c57600080fd5b8015158114611d8c57600080fdfea2646970667358221220ea6e7d6fadd2a51dddf2f701f7ded10980e25943adf520131cdaba9f3db8655264736f6c63430008030033636f6c6c61746572616c207472616e7366657272656420696e636f72726563746c79a264697066735822122077bea591ac66bd18dba167f93b4c2936ab3f3b3e6d22b7367c7fa22f8dd8deae64736f6c634300080300336080604052348015600f57600080fd5b5060998061001e6000396000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c8063665a11ca14602d575b600080fd5b604773c676b2f6674a1650baf5948bc1dd9326f2743a4d81565b6040516001600160a01b03909116815260200160405180910390f3fea2646970667358221220ad16c4a705ae445408431d294c1bf468f228474c8f49962c6d014b8a85c9eaef64736f6c63430008030033",
  "deployedBytecode": "",
  "libraries": {},
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 6022,
        "contract": "contracts/tests/USDLemma_Test.sol:USDLemma_Test",
        "label": "usdLemma",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(USDLemma)4591"
      },
      {
        "astId": 6025,
        "contract": "contracts/tests/USDLemma_Test.sol:USDLemma_Test",
        "label": "mcdexLemma",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(MCDEXLemma)7585"
      },
      {
        "astId": 6032,
        "contract": "contracts/tests/USDLemma_Test.sol:USDLemma_Test",
        "label": "mcdexAdresses",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(MCDEXAdresses)5933"
      },
      {
        "astId": 6035,
        "contract": "contracts/tests/USDLemma_Test.sol:USDLemma_Test",
        "label": "liquidityPool",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(ILiquidityPool)4979"
      },
      {
        "astId": 6050,
        "contract": "contracts/tests/USDLemma_Test.sol:USDLemma_Test",
        "label": "collateral",
        "offset": 0,
        "slot": "4",
        "type": "t_contract(IERC20Upgradeable)2128"
      }
    ],
    "types": {
      "t_contract(IERC20Upgradeable)2128": {
        "encoding": "inplace",
        "label": "contract IERC20Upgradeable",
        "numberOfBytes": "20"
      },
      "t_contract(ILiquidityPool)4979": {
        "encoding": "inplace",
        "label": "contract ILiquidityPool",
        "numberOfBytes": "20"
      },
      "t_contract(MCDEXAdresses)5933": {
        "encoding": "inplace",
        "label": "contract MCDEXAdresses",
        "numberOfBytes": "20"
      },
      "t_contract(MCDEXLemma)7585": {
        "encoding": "inplace",
        "label": "contract MCDEXLemma",
        "numberOfBytes": "20"
      },
      "t_contract(USDLemma)4591": {
        "encoding": "inplace",
        "label": "contract USDLemma",
        "numberOfBytes": "20"
      }
    }
  }
}